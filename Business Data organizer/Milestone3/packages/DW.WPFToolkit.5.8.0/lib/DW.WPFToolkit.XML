<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DW.WPFToolkit</name>
    </assembly>
    <members>
        <member name="T:DW.WPFToolkit.Controls.ArcPanel">
            <summary>
            Arranges child elements in a configurable arc form.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <ItemsControl ItemsSource="{Binding Cards}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WPFToolkit:ArcPanel Width="210" Height="100" Bend="3" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
            
            <WPFToolkit:ArcPanel Width="300" Height="150" Bend="2">
                <Button Content="First" />
                <Button Content="Second" />
                <Button Content="Third" />
            </WPFToolkit:ArcPanel>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ArcPanel.RotateElementsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.ArcPanel.RotateElements"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ArcPanel.BendProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.ArcPanel.Bend"/> dependency property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.ArcPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.ArcPanel"/> class.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.ArcPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Lets each child calculating is needed size.
            </summary>
            <param name="availableSize">The available space by the parent control.</param>
            <returns>The calculated size needed for the control.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.ArcPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positionates each child in an arc line form depending on the Bend and amount of child controls.
            </summary>
            <param name="finalSize">The maximum possible space given by the parent control.</param>
            <returns>The calculated needed space in sum of all available child controls.</returns>
        </member>
        <member name="P:DW.WPFToolkit.Controls.ArcPanel.RotateElements">
            <summary>
            Gets or sets a value that defines if the child elements has to be rotated by the arc line.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.ArcPanel.Bend">
            <summary>
            Gets or sets a value that defines how strong the arc line should be bended.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.ContextMenuItem">
            <summary>
            Brings an easy to use MenuItem to be used in the ContextMenu no matter if its in an own VisualTree or not.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <TextBlock Text="{Binding Name}">
                <TextBlock.ContextMenu>
                    <ContextMenu>
                        <Toolkit:ContextMenuItem Header="Edit Global"
                                                 Command="{Binding EditCommand}"
                                                 CommandParameter="{Binding ItemDataContext, RelativeSource={RelativeSource Self}}" />
                        <Toolkit:ContextMenuItem Header="Edit Directly"
                                                 IsBindToSelf="True"
                                                 Command="{Binding EditCommand}" />
                    </ContextMenu>
                </TextBlock.ContextMenu>
            </TextBlock>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.ContextMenuItem.OnInitialized(System.EventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.FrameworkElement.IsInitialized"/> property is set to true.
            </summary>
            <param name="e">The event data for the <see cref="P:System.Windows.FrameworkElement.IsInitialized"/> event.</param>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ContextMenuItem.ItemDataContextProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.ContextMenuItem.ItemDataContext"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ContextMenuItem.ElementHolderProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.ContextMenuItem.ElementHolder"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ContextMenuItem.IsBindToSelfProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.ContextMenuItem.IsBindToSelf"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.ContextMenuItem.ItemDataContext">
            <summary>
            Gets or sets the data as original DataContext for the case the DataContext get changed to the parent object.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.ContextMenuItem.ElementHolder">
            <summary>
            Gets or sets a placeholder for the current item parent from the other visual tree. This is used internally, please do not set it to another value otherwise the ContextMenuItem will not work properly.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.ContextMenuItem.IsBindToSelf">
            <summary>
            The DataContext will be the element like original.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.ButtonPanePosition">
            <summary>
            Defines where the button pane in the <see cref="T:DW.WPFToolkit.Controls.DockingPane"/> should be located.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ButtonPanePosition.Inner">
            <summary>
            The button pane has to be on the inner side moving in with expanding and collapsing the content area.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ButtonPanePosition.Outher">
            <summary>
            The button pane has to be on the outher side not moving when the content area gets expanded or collapsed.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.DockingPane">
            <summary>
            Represents a pane where items can be collapsed into and expanded back. A single item is visible only at one time.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <DockPanel>
            
                <WPFToolkit:DockingPane DockPanel.Dock="Right" ExpandDirection="RightToLeft" AreaWidth="250" AreaMinWidth="150">
                    <WPFToolkit:DockingPaneItem Header="Title 1">
                        <ListBox />
                    </WPFToolkit:DockingPaneItem>
                    <WPFToolkit:DockingPaneItem Header="Title 2">
                        <ListBox />
                    </WPFToolkit:DockingPaneItem>
                </WPFToolkit:DockingPane>
            
                <Grid />
            </DockPanel>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.DockingPane.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Checks if the item is already the correct item container. If not the <see cref="M:DW.WPFToolkit.Controls.DockingPane.GetContainerForItemOverride"/> will be used to generate the right container.
            </summary>
            <param name="item">The item to shown in the <see cref="T:DW.WPFToolkit.Controls.DockingPane"/>.</param>
            <returns>True if the item is the correct item container already.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.DockingPane.GetContainerForItemOverride">
            <summary>
            Generates a new child item container to hold in the <see cref="T:DW.WPFToolkit.Controls.DockingPane"/>.
            </summary>
            <returns>The generated child item container</returns>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DockingPane.ButtonsPositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DockingPane.ExpandDirection"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DockingPane.ExpandDirectionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DockingPane.ExpandDirection"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DockingPane.AreaWidthProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DockingPane.AreaWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DockingPane.AreaMinWidthProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DockingPane.AreaMinWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DockingPane.AreaMaxWidthProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DockingPane.AreaMaxWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DockingPane.AreaHeightProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DockingPane.AreaHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DockingPane.AreaMinHeightProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DockingPane.AreaMinHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DockingPane.AreaMaxHeightProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DockingPane.AreaMaxHeight"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DockingPane.ButtonsPosition">
            <summary>
            Gets or sets the button pane position in the control.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DockingPane.ExpandDirection">
            <summary>
            Gets or sets in which direction the selected content should be expanded to.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DockingPane.AreaWidth">
            <summary>
            Gets or sets the width of the area visible if an item gets expanded.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DockingPane.AreaMinWidth">
            <summary>
            Gets or sets the minimum width of the area visible if an item gets expanded.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DockingPane.AreaMaxWidth">
            <summary>
            Gets or sets the maximum width of the area visible if an item gets expanded.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DockingPane.AreaHeight">
            <summary>
            Gets or sets the height of the area visible if an item gets expanded.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DockingPane.AreaMinHeight">
            <summary>
            Gets or sets the minimum height of the area visible if an item gets expanded.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DockingPane.AreaMaxHeight">
            <summary>
            Gets or sets the maximum height of the area visible if an item gets expanded.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.DockingPaneItem">
            <summary>
            Represents a single page with header in the DockingPane
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.ExpandDirection">
            <summary>
            Defines in which direction the <see cref="T:DW.WPFToolkit.Controls.DockingPane"/> has to expand.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ExpandDirection.TopToDown">
            <summary>
            The docking pane has to expand from the top to the bottom.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ExpandDirection.RightToLeft">
            <summary>
            The docking pane has to expand from the right to the left.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ExpandDirection.BottomToUp">
            <summary>
            The docking pane has to expand from the bottom to the top.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ExpandDirection.LeftToRight">
            <summary>
            The docking pane has to expand from the left to the right.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.PaneToggleButton">
            <summary>
            Represents a toggle button in the bottom pane of an <see cref="T:DW.WPFToolkit.Controls.DockingPane"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.DynamicTabControl">
            <summary>
            Enhances the <see cref="T:System.Windows.Controls.TabControl"/> with buttons for add new tab item and close buttons of existing tab items.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <Toolkit:DynamicTabControl ShowAddButton="True"
                                       TabItemAddingCommand="{Binding AddItemCommand}"
                                       TabItemClosingCommand="{Binding RemoveItemCommand}" />
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.DynamicTabControl.GetContainerForItemOverride">
            <summary>
            Generates a new child item container to hold in the <see cref="T:DW.WPFToolkit.Controls.DynamicTabControl"/>.
            </summary>
            <returns>The generated child item container</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.DynamicTabControl.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Checks if the item is already the correct item container. If not the <see cref="M:DW.WPFToolkit.Controls.DynamicTabControl.GetContainerForItemOverride"/> will be used to generate the right container.
            </summary>
            <param name="item">The item to shown in the <see cref="T:DW.WPFToolkit.Controls.DynamicTabControl"/>.</param>
            <returns>True if the item is the correct item container already.</returns>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabControl.ShowCloseButtonsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabControl.ShowCloseButtons"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabControl.ShowAddButtonProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabControl.ShowAddButton"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabControl.TabItemClosingCommandProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabControl.TabItemClosingCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabControl.TabItemAddingCommandParameterProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabControl.TabItemAddingCommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabControl.TabItemAddingCommandProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabControl.TabItemAddingCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabControl.AddButtonMarginProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabControl.AddButtonMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabControl.AddButtonWidthProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabControl.AddButtonWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabControl.AddButtonHeightProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabControl.AddButtonHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabControl.AddButtonPositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabControl.AddButtonPosition"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabControl.ShowCloseButtons">
            <summary>
            Gets or sets a value which indicates if the close buttons are shown on the tab items header.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabControl.ShowAddButton">
            <summary>
            Gets or sets the value which indicates if the add new tab item button is shown.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabControl.TabItemClosingCommand">
            <summary>
            Gets or sets the command which gets called when the close on the tab item header is clicked. The tab DataContext is forwarded as the command parameter.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabControl.TabItemAddingCommandParameter">
            <summary>
            Gets or sets the parameter which is passed with the <see cref="P:DW.WPFToolkit.Controls.DynamicTabControl.TabItemAddingCommand"/> command.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabControl.TabItemAddingCommand">
            <summary>
            Gets or sets the command which gets called when the add new tab item button is pressed.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabControl.AddButtonMargin">
            <summary>
            Gets or sets the margin of the add new tab item button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabControl.AddButtonWidth">
            <summary>
            Gets or sets the width of the add new tab item button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabControl.AddButtonHeight">
            <summary>
            Gets or sets the height of the add new tab item button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabControl.AddButtonPosition">
            <summary>
            Gets or sets the value which indicates where the add new tab item button has to be placed in the header.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.DynamicTabItem">
            <summary>
            Represents the shown tab in the <see cref="T:DW.WPFToolkit.Controls.DynamicTabControl"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabItem.CloseButtonPositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabItem.CloseButtonPosition"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabItem.CloseButtonMarginProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabItem.CloseButtonMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabItem.HorizontalCloseButtonAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabItem.HorizontalCloseButtonAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabItem.VerticalCloseButtonAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabItem.VerticalCloseButtonAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabItem.CloseButtonHeightProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabItem.CloseButtonHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabItem.CloseButtonWidthProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabItem.CloseButtonWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DynamicTabItem.ShowCloseButtonProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.DynamicTabItem.ShowCloseButton"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabItem.CloseButtonPosition">
            <summary>
            Gets or sets a value which indicates where the close tab item button have to be placed in the header.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabItem.CloseButtonMargin">
            <summary>
            Gets or sets the margin of the close tab item button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabItem.HorizontalCloseButtonAlignment">
            <summary>
            Gets or sets the horizontal alignment of the close tab item button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabItem.VerticalCloseButtonAlignment">
            <summary>
            Gets or sets the vertical alignment of the close tab item button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabItem.CloseButtonHeight">
            <summary>
            Gets or sets the height of the close tab item button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabItem.CloseButtonWidth">
            <summary>
            Gets or sets the width of the close tab item button
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.DynamicTabItem.ShowCloseButton">
            <summary>
            Gets or sets a value which indicates if the close tab item button is visible or not.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.TabItemAddButton">
            <summary>
            Represents the add new tab Button shown in the <see cref="T:DW.WPFToolkit.Controls.DynamicTabControl"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TabItemAddButton.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TabItemAddButton.StrokeThickness"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TabItemAddButton.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness of the plus icon shown in the template.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.TabItemCloseButton">
            <summary>
            Represents the close Button shown in the <see cref="T:DW.WPFToolkit.Controls.DynamicTabControl"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TabItemCloseButton.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TabItemCloseButton.StrokeThickness"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TabItemCloseButton.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness of the X in the template.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.EllipsedProgressBar">
            <summary>
            Implements the ProgressBar in an ellipsed form.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <Controls:EllipsedProgressBar Value="10"
                                          Minimum="0"
                                          Maximum="100"
                                          OutherRadius="20"
                                          RotateSpeed="0.5"
                                          IsIndeterminate="True" />
            
            <Controls:EllipsedProgressBar Value="25"
                                          Minimum="0"
                                          Maximum="100"
                                          OutherRadius="20"
                                          RotateSpeed="0.8"
                                          IsIndeterminate="True"
                                          IsInversed="True" />
            
            <Controls:EllipsedProgressBar Value="34"
                                          Minimum="0"
                                          Maximum="100"
                                          OutherRadius="20"
                                          HasPercentLabel="True" />
            
            <Controls:EllipsedProgressBar Value="0"
                                          Minimum="0"
                                          Maximum="100"
                                          OutherRadius="20"
                                          RotateSpeed="0.8"
                                          DisplayKind="Pointer"
                                          InnerRadius="10"
                                          ShowInnerCircle="True"
                                          ShowOutherCircle="True"
                                          StrokeThickness="1"
                                          IsIndeterminate="True" />
            
            <Grid>
                <Controls:EllipsedProgressBar Value="20"
                                              Minimum="0"
                                              Maximum="100"
                                              OutherRadius="20"
                                              InnerRadius="5"
                                              RotateSpeed="0.7"
                                              IsIndeterminate="True" />
                
                <Controls:GappedOverlay OutherRadius="21" InnerRadius="5" InnerGapRadius="8" OutherGapRadius="16" />
                
            </Grid>
            
            <Controls:EllipsedProgressBar Value="100"
                                          Minimum="0"
                                          Maximum="100"
                                          InnerRadius="16"
                                          OutherRadius="18.5"
                                          RotateSpeed="0.8"
                                          IsIndeterminate="True"
                                          DisplayKind="Items">
                <Controls:EllipsedProgressBar.ItemsFactory>
                    <Controls:EllipseItemsFactory Size="5"
                                                  ItemsCount="15"
                                                  OpacityShrinking="0.1" />
                </Controls:EllipsedProgressBar.ItemsFactory>
            </Controls:EllipsedProgressBar>
            
            <Controls:EllipsedProgressBar Value="100"
                                          Minimum="0"
                                          Maximum="100"
                                          InnerRadius="15"
                                          OutherRadius="20"
                                          RotateSpeed="0.8"
                                          IsIndeterminate="True"
                                          DisplayKind="Items">
                <Controls:EllipsedProgressBar.ItemsFactory>
                    <Controls:LineItemsFactory Caps="Flat"
                                               Length="8"
                                               OpacityShrinking="0.1"
                                               ItemsCount="8"
                                               Thickness="2" />
                </Controls:EllipsedProgressBar.ItemsFactory>
            </Controls:EllipsedProgressBar>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EllipsedProgressBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/> class.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EllipsedProgressBar.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called when the element has to be rendered.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.OutherRadiusProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.OutherRadius"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.InnerRadiusProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.InnerRadius"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.StrokeThicknessProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.StrokeThickness"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.DisplayKindProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.DisplayKind"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.IsInversedProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.IsInversed"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.ShowOutherCircleProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.ShowOutherCircle"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.OutherCircleBrushProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.OutherCircleBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.InnerCircleBrushProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.InnerCircleBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.OutherCircleThicknessProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.OutherCircleThickness"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.InnerCircleThicknessProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.InnerCircleThickness"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.ShowInnerCircleProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.ShowInnerCircle"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.StartAngleProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.StartAngle"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.OutherCircleDashArrayProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.OutherCircleDashArray"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.InnerCircleDashArrayProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.InnerCircleDashArray"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.PercentLabelStyleProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.PercentLabelStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.HasPercentLabelProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.HasPercentLabel"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.ItemsFactoryProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.ItemsFactory"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.RotateItemsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.RotateItems"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.IsIndeterminateProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.IsIndeterminate"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.RotateSpeedProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.RotateSpeed"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBar.RotateDirectionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.RotateDirection"/> dependency property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EllipsedProgressBar.OnMinimumChanged(System.Double,System.Double)">
            <summary>
            Handles changed minimum value.
            </summary>
            <param name="oldMinimum">The old minimum value.</param>
            <param name="newMinimum">The new minimum value.</param>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EllipsedProgressBar.OnMaximumChanged(System.Double,System.Double)">
            <summary>
            Handles changed maximum value.
            </summary>
            <param name="oldMaximum">The old maximum value.</param>
            <param name="newMaximum">The new maximum value.</param>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EllipsedProgressBar.OnValueChanged(System.Double,System.Double)">
            <summary>
            Handles changed progress value.
            </summary>
            <param name="oldValue">The old progress value.</param>
            <param name="newValue">The new progress value.</param>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EllipsedProgressBar.OnApplyTemplate">
            <summary>
            The template gets added to the control.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.OutherRadius">
            <summary>
            Gets or sets the outher radius of the ellipse.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.InnerRadius">
            <summary>
            Gets or sets the inner radius of the ellipse
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness of the ellipses.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.DisplayKind">
            <summary>
            Gets or sets a value which indicates how the progress should be displayed. See <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBarKind"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.IsInversed">
            <summary>
            Gets or sets a value which indicates if the progress should be painted as an inversed state.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.ShowOutherCircle">
            <summary>
            Gets or sets a value which indicates of the outher ellipse is shown or not.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.OutherCircleBrush">
            <summary>
            Gets or sets the color of the outher ellipse.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.InnerCircleBrush">
            <summary>
            Gets or sets the color of the inner ellipse
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.OutherCircleThickness">
            <summary>
            Gets or sets the thickness of the outher ellipse.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.InnerCircleThickness">
            <summary>
            Gets or sets the thickness of the inner ellipse.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.ShowInnerCircle">
            <summary>
            Gets or set a value which indicates of the inner ellipse is shown or not.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.StartAngle">
            <summary>
            Gets or sets the start position of the progress in the ellipse. 0 is on Top.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.OutherCircleDashArray">
            <summary>
            Gets or sets the dash array of the outher ellipse.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.InnerCircleDashArray">
            <summary>
            Gets or sets the dash array of the inner circle.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.PercentLabelStyle">
            <summary>
            Gets or sets the style of ther percentage display in center of the EllipsedProgressBar.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.HasPercentLabel">
            <summary>
            Gets or sets a value which indicates if a percentage text is shown in the center of the EllipsedProgressBar or not.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.ItemsFactory">
            <summary>
            Gets or sets the <see cref="T:DW.WPFToolkit.Controls.IItemsFactory"/> to be used when the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.DisplayKind"/> is set to <see cref="F:DW.WPFToolkit.Controls.EllipsedProgressBarKind.Items"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.RotateItems">
            <summary>
            Gets or sets a value which indicates if the items created by the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.ItemsFactory"/> should be rotated or not.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.IsIndeterminate">
            <summary>
            Gets or sets a value which indicates if the EllipsedProgressBar is indeterminate.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.RotateSpeed">
            <summary>
            Gets or sets the rotating speed to be used when <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.IsIndeterminate"/> is set to true.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsedProgressBar.RotateDirection">
            <summary>
            Gets or sets the rotate orientation to be used for the items created by the <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.ItemsFactory"/> if <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.RotateItems"/> is set to true.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.EllipsedProgressBarKind">
            <summary>
            Defines how the progress in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/> is shown.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBarKind.Pie">
            <summary>
            The progress value is shown in a pie form. A minimum value is an empty ellipse form and a maximum value is a full filled ellipse.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBarKind.Pointer">
            <summary>
            The progress value is shown by a pointer line from the center to the value in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsedProgressBarKind.Items">
            <summary>
            The progress value is shown by the items in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>. This is used in the <see cref="T:DW.WPFToolkit.Controls.IItemsFactory"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.EllipseItemsFactory">
            <summary>
            Implements the <see cref="T:DW.WPFToolkit.Controls.IItemsFactory"/> and provides ellipse items to the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.IItemsFactory">
            <summary>
            The object implementing this interface is used to create and updtae the items in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/> depending on the progress value and progress bar state.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.IItemsFactory.GenerateItems(System.Boolean)">
            <summary>
            This method returns the items placed into the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.
            </summary>
            <param name="forIndeterminate">Defines if the using <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/> is indeterminate or not.</param>
            <returns>The elements to be placed into the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>. These object will be passed to the <see cref="M:DW.WPFToolkit.Controls.IItemsFactory.EditItemsForValue(System.Collections.Generic.IEnumerable{System.Windows.UIElement},System.Double,System.Double,System.Double)"/> as soon any progress value changes.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.IItemsFactory.EditItemsForValue(System.Collections.Generic.IEnumerable{System.Windows.UIElement},System.Double,System.Double,System.Double)">
            <summary>
            Updates all items which are placed in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/> by the given progress value.
            </summary>
            <param name="items">The items placed in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/> to be updated.</param>
            <param name="mininum">The configured minimum value of the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.</param>
            <param name="maximum">The configured maximum value of the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.</param>
            <param name="value">The current progress value of the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.</param>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EllipseItemsFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.EllipseItemsFactory"/> class.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EllipseItemsFactory.GenerateItems(System.Boolean)">
            <summary>
            Creates the items to shown in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.
            </summary>
            <param name="forIndeterminate">Defines if the items are placed in an <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/> where <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.IsIndeterminate"/> is set to true.</param>
            <returns>The created items to shown in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EllipseItemsFactory.EditItemsForValue(System.Collections.Generic.IEnumerable{System.Windows.UIElement},System.Double,System.Double,System.Double)">
            <summary>
            Modifies the items depending on the current progress state called by the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.
            </summary>
            <param name="items">The items created by the <see cref="M:DW.WPFToolkit.Controls.EllipseItemsFactory.GenerateItems(System.Boolean)"/>.</param>
            <param name="mininum">The minimum value defined in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.</param>
            <param name="maximum">The maximum value defined in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/></param>
            <param name="value">The current progress value in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.</param>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipseItemsFactory.Color">
            <summary>
            Gets or sets the color for each item returned by the <see cref="M:DW.WPFToolkit.Controls.EllipseItemsFactory.GenerateItems(System.Boolean)"/> method. The default is Colors.Red.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipseItemsFactory.ItemsCount">
            <summary>
            Gets or sets the amount of items created by the <see cref="M:DW.WPFToolkit.Controls.EllipseItemsFactory.GenerateItems(System.Boolean)"/> method. The default is 10.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipseItemsFactory.OpacityShrinking">
            <summary>
            Gets or sets the value the opacity has to be thrinked for the items created by the <see cref="M:DW.WPFToolkit.Controls.EllipseItemsFactory.GenerateItems(System.Boolean)"/> method. This is not used if the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/> is markes as indeterminate. The default is 0.1.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipseItemsFactory.Size">
            <summary>
            Gets or sets the size for the items created by the <see cref="M:DW.WPFToolkit.Controls.EllipseItemsFactory.GenerateItems(System.Boolean)"/> method. The default is 8.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.GappedOverlay">
            <summary>
            Represents a overlay surface to be placed in front of the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.GappedOverlay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.GappedOverlay"/> class.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.GappedOverlay.OutherRadiusProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.GappedOverlay.OutherRadius"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.GappedOverlay.OutherGapRadiusProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.GappedOverlay.OutherGapRadius"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.GappedOverlay.InnerGapRadiusProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.GappedOverlay.InnerGapRadius"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.GappedOverlay.InnerRadiusProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.GappedOverlay.InnerRadius"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.GappedOverlay.GapDistanceProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.GappedOverlay.GapDistance"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.GappedOverlay.OutherDistanceProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.GappedOverlay.OutherDistance"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.GappedOverlay.InnerDistanceProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.GappedOverlay.InnerDistance"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.GappedOverlay.OutherCircleBrushProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.GappedOverlay.OutherCircleBrush"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.GappedOverlay.OutherCircleThicknessProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.GappedOverlay.OutherCircleThickness"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.GappedOverlay.RotateAngleProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.GappedOverlay.RotateAngle"/> dependency property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.GappedOverlay.OnApplyTemplate">
            <summary>
            The template gets added to the control.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.GappedOverlay.OutherRadius">
            <summary>
            Gets or sets the radius of the outher ellipse of the whole GappedOverlay
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.GappedOverlay.OutherGapRadius">
            <summary>
            Gets or sets the radius of the outher ellipse. There the gaps will start.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.GappedOverlay.InnerGapRadius">
            <summary>
            Gets or sets the radius of the inner ellipse. There the gaps will end.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.GappedOverlay.InnerRadius">
            <summary>
            Gets or sets the radius of the end point in center of the whole GappedOverlay.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.GappedOverlay.GapDistance">
            <summary>
            Gets or sets the distances between each gap.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.GappedOverlay.OutherDistance">
            <summary>
            Gets or sets the distance between the gaps and the other ellipse of the GappedOverlay.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.GappedOverlay.InnerDistance">
            <summary>
            Gets or sets the distance between the gaps and the inner ellipse of the center point in the GappedOverlay.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.GappedOverlay.OutherCircleBrush">
            <summary>
            Gets or sets the brush of the outher ellipse of the GappedOverlay.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.GappedOverlay.OutherCircleThickness">
            <summary>
            Gets or sets the thickness of the outher ellipse of the GappedOverlay
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.GappedOverlay.RotateAngle">
            <summary>
            Gets or sets the rotating angle of the whole GappedOverlay.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.LineItemsFactory">
            <summary>
            Implements the <see cref="T:DW.WPFToolkit.Controls.IItemsFactory"/> and provides line items to the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.LineItemsFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.LineItemsFactory"/> class.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.LineItemsFactory.GenerateItems(System.Boolean)">
            <summary>
            Creates the items to shown in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.
            </summary>
            <param name="forIndeterminate">Defines if the items are placed in an <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/> where <see cref="P:DW.WPFToolkit.Controls.EllipsedProgressBar.IsIndeterminate"/> is set to true.</param>
            <returns>The created items to shown in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.LineItemsFactory.EditItemsForValue(System.Collections.Generic.IEnumerable{System.Windows.UIElement},System.Double,System.Double,System.Double)">
            <summary>
            Modifies the items depending on the current progress state called by the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.
            </summary>
            <param name="items">The items created by the <see cref="M:DW.WPFToolkit.Controls.EllipseItemsFactory.GenerateItems(System.Boolean)"/>.</param>
            <param name="mininum">The minimum value defined in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.</param>
            <param name="maximum">The maximum value defined in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/></param>
            <param name="value">The current progress value in the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/>.</param>
        </member>
        <member name="P:DW.WPFToolkit.Controls.LineItemsFactory.Caps">
            <summary>
            Gets or sets the line caps for the items created by the <see cref="M:DW.WPFToolkit.Controls.LineItemsFactory.GenerateItems(System.Boolean)"/> method. The default is <see cref="F:System.Windows.Media.PenLineCap.Round"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.LineItemsFactory.Color">
            <summary>
            Gets or sets the line color for the items created by the <see cref="M:DW.WPFToolkit.Controls.LineItemsFactory.GenerateItems(System.Boolean)"/> method. The default is Colors.Blue.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.LineItemsFactory.ItemsCount">
            <summary>
            Gets or sets the amount of lines created by the <see cref="M:DW.WPFToolkit.Controls.LineItemsFactory.GenerateItems(System.Boolean)"/> method. The default is 10.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.LineItemsFactory.Length">
            <summary>
            Gets or sets the length of the lines created by the <see cref="M:DW.WPFToolkit.Controls.LineItemsFactory.GenerateItems(System.Boolean)"/> method. The default is 10.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.LineItemsFactory.OpacityShrinking">
            <summary>
            Gets or sets the value the opacity has to be thrinked for the items created by the <see cref="M:DW.WPFToolkit.Controls.LineItemsFactory.GenerateItems(System.Boolean)"/> method. This is not used if the <see cref="T:DW.WPFToolkit.Controls.EllipsedProgressBar"/> is markes as indeterminate. The default is 0.1.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.LineItemsFactory.Thickness">
            <summary>
            Gets or sets the thickness of the lines created by the <see cref="M:DW.WPFToolkit.Controls.LineItemsFactory.GenerateItems(System.Boolean)"/> method. The default is 4.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.MultiplyConverter">
            <summary>
            Multiplies the given value by the parameter value.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.MultiplyConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Takes the value as double and multiplies it with the parameter parsed to double.
            </summary>
            <param name="value"></param>
            <param name="targetType">This parameter is not used.</param>
            <param name="parameter"></param>
            <param name="culture">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.MultiplyConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">This parameter is not used.</param>
            <param name="targetType">This parameter is not used.</param>
            <param name="parameter">This parameter is not used.</param>
            <param name="culture">This parameter is not used.</param>
            <returns>nothing</returns>
            <exception cref="T:System.NotImplementedException">The convert back is not intended to be used.</exception>
        </member>
        <member name="T:DW.WPFToolkit.Controls.ElementsRotateDirection">
            <summary>
            Defines how the items should be rotated in the <see cref="T:DW.WPFToolkit.Controls.EllipsePanel"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ElementsRotateDirection.Introversive">
            <summary>
            The top of the items are oriented to the ellipse panel center point.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ElementsRotateDirection.Outroversive">
            <summary>
            The bottom of the items are oriented to the ellipse pancel center point.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ElementsRotateDirection.Clockwise">
            <summary>
            The items are oriented with the ellipse form clockwise.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ElementsRotateDirection.Counterclockwise">
            <summary>
            The items are oriented with the ellipse form counter clockwise.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.ElementStartPosition">
            <summary>
            Defines the position where the elements has to start in the <see cref="T:DW.WPFToolkit.Controls.EllipsePanel"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ElementStartPosition.Left">
            <summary>
            The first item in the ellipse panel is starting on the left side.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ElementStartPosition.Top">
            <summary>
            The first item in the ellipse panel is starting on top.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ElementStartPosition.Right">
            <summary>
            The first item in the ellipse panel is starting on the right side.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ElementStartPosition.Bottom">
            <summary>
            The first item in the ellipse panel is starting on bottom.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.EllipsePanel">
            <summary>
            Arranges child elements in a configurable ellipse form.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <ItemsControl ItemsSource="{Binding Player}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WPFToolkit:EllipsePanel ElementStartPosition="Bottom"
                                                 EllipseRotateDirection="Clockwise"
                                                 ElementsRotateDirection="Outroversive"
                                                 RotateElements="True" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
            
            <WPFToolkit:EllipsePanel>
                <Button Content="One" />
                <Button Content="Two" />
                <Button Content="Three" />
                <Button Content="Four" />
            </WPFToolkit:EllipsePanel>
            ]]>
            </code></example>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsePanel.RotateElementsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsePanel.RotateElements"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsePanel.ElementsRotateDirectionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsePanel.ElementsRotateDirection"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsePanel.EllipseRotateDirectionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsePanel.EllipseRotateDirection"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EllipsePanel.ElementStartPositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EllipsePanel.ElementStartPosition"/> dependency property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EllipsePanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Lets each child calculating is needed size.
            </summary>
            <param name="availableSize">The available space by the parent control.</param>
            <returns>The calculated size needed for the control.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EllipsePanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positionates each child in an ellipse form depending on the amount of child controls.
            </summary>
            <param name="finalSize">The maximum possible space given by the parent control.</param>
            <returns>The calculated needed space in sum of all available child controls.</returns>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsePanel.RotateElements">
            <summary>
            Gets or sets if the child elements has to be rotated.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsePanel.ElementsRotateDirection">
            <summary>
            Gets or sets the rotating direction of the child elements if <see cref="P:DW.WPFToolkit.Controls.EllipsePanel.RotateElements"/> is set to true.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsePanel.EllipseRotateDirection">
            <summary>
            Gets or sets the direction where the child elements in the ellipse should be alligned.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EllipsePanel.ElementStartPosition">
            <summary>
            Gets or sets where the first child element has to start in the ellipse.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.EnhancedComboBox">
            <summary>
            Enhances the <see cref="T:System.Windows.Controls.ComboBox"/> with a background info text.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <WPFToolkit:EnhancedComboBox IsEditable="True" InfoText="Required" InfoAppearance="OnEmpty" />
            ]]>
            </code>
            </example>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedComboBox.InfoAppearanceProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoAppearance"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoText"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextFontStyleProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextFontStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextForegroundProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextForeground"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextHorizontalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextHorizontalAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextVerticalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextVerticalAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextMarginProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextStyleProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextStyle"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoAppearance">
            <summary>
            Gets or sets a value which indicates when the info text in the background is shown.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoText">
            <summary>
            Gets or sets the info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextFontStyle">
            <summary>
            Gets or sets the font style to be used in the info text in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextForeground">
            <summary>
            Gets or sets the foreground color of the info text in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextHorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextVerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextMargin">
            <summary>
            Gets or sets margin of the info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedComboBox.InfoTextStyle">
            <summary>
            Gets or sets the style of the info text shown in the background.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.EnhancedGridViewColumn">
            <summary>
            Enhances the <see cref="T:System.Windows.Controls.GridViewColumn"/> by sort information and name.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedGridViewColumn.NameProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedGridViewColumn.Name"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedGridViewColumn.IsDefaultSortColumnProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedGridViewColumn.IsDefaultSortColumn"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedGridViewColumn.SortPropertyNameProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedGridViewColumn.SortPropertyName"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedGridViewColumn.ProportionalWidthProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedGridViewColumn.ProportionalWidth"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedGridViewColumn.Name">
            <summary>
            Gets or sets the name of the current column. This will be used by the <see cref="P:DW.WPFToolkit.Controls.EnhancedListView.VisibleColumns"/> collection.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedGridViewColumn.IsDefaultSortColumn">
            <summary>
            Gets or sets a value which indicates if the current column is the default sort when the <see cref="T:DW.WPFToolkit.Controls.EnhancedListView"/> is loaded.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedGridViewColumn.SortPropertyName">
            <summary>
            Gets or sets the property name which will be used for sorting by the current column.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedGridViewColumn.ProportionalWidth">
            <summary>
            Gets or sets the proportional width in percent to be used for this column if <see cref="P:DW.WPFToolkit.Controls.EnhancedListView.AutoSize"/> is set to <see cref="F:DW.WPFToolkit.Interactivity.ColumnResizeKind.Proportional"/>. If the width is set this property has no effect.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.EnhancedListView">
            <summary>
            Enhances the <see cref="T:System.Windows.Controls.ListView"/> with additional features like column sorting, dynamic column width and dynamic shown column.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <DataTemplate x:Key="HeaderArrowUp">
                <Grid>
                    <TextBlock Text="{Binding}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                    <Path StrokeThickness="0" SnapsToDevicePixels="True" Data="M 0,4 L 4,0 L 8,4 L 0,4"
                          Margin="0,-2,0,0" VerticalAlignment="Top" HorizontalAlignment="Center">
                        <Path.Fill>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                <GradientStop Color="#FF3C5E72" Offset="0"/>
                                <GradientStop Color="#FFC3E4F5" Offset="1"/>
                            </LinearGradientBrush>
                        </Path.Fill>
                    </Path>
                </Grid>
            </DataTemplate>
            <DataTemplate x:Key="HeaderArrowDown">
                <Grid>
                    <TextBlock Text="{Binding}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                    <Path StrokeThickness="0" SnapsToDevicePixels="True" Data="M 0,0 L 4,4 L 8,0 L 0,0"
                          Margin="0,-2,0,0" VerticalAlignment="Top" HorizontalAlignment="Center">
                        <Path.Fill>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                <GradientStop Color="#FF3C5E72" Offset="0"/>
                                <GradientStop Color="#FFC4E3F4" Offset="1"/>
                            </LinearGradientBrush>
                        </Path.Fill>
                    </Path>
                </Grid>
            </DataTemplate>
            <DataTemplate x:Key="HeaderTransparent">
                <Grid>
                    <TextBlock Text="{Binding}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                </Grid>
            </DataTemplate>
            
            <WPFToolkit:EnhancedListView AllowColumnSortings="True"
                                         AscendingSortHeaderTemplate="{StaticResource HeaderArrowUp}"
                                         DescendingSortHeaderTemplate="{StaticResource HeaderArrowDown}"
                                         NeutralHeaderTemplate="{StaticResource HeaderTransparent}"
                                         
                                         VisibleColumns="{Binding VisibleColumnNames}"
                                         
                                         AutoSize="Proportional"
                                         >
                <ListView.View>
                    <GridView>
                        <WPFToolkit:EnhancedGridViewColumn SortPropertyName="Name" IsDefaultSortColumn="True" Name="Name" ProportionalWidth="60" />
                        <WPFToolkit:EnhancedGridViewColumn SortPropertyName="Size" Name="Size" ProportionalWidth="30" />
                        <WPFToolkit:EnhancedGridViewColumn SortPropertyName="Date" Name="Date" ProportionalWidth="10" />
                    </GridView>
                </ListView.View>
            </WPFToolkit:EnhancedListView>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedListView.AutoSizeProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedListView.AutoSize"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedListView.TemplatePaddingWidthFixProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedListView.TemplatePaddingWidthFix"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedListView.VisibleColumnsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedListView.VisibleColumns"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedListView.NeutralHeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedListView.NeutralHeaderTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedListView.AscendingSortHeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedListView.AscendingSortHeaderTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedListView.DescendingSortHeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedListView.DescendingSortHeaderTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedListView.AllowColumnSortingsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedListView.AllowColumnSortings"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedListView.AutoSize">
            <summary>
            Gets or sets a value which indicates how the columns should be resized. Columns which width is set will not modified.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedListView.TemplatePaddingWidthFix">
            <summary>
            Gets or sets additional distance on the right for the sum of all column width if the width is calculated.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedListView.VisibleColumns">
            <summary>
            Gets or sets a collection of columns which should be visible by their name.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedListView.NeutralHeaderTemplate">
            <summary>
            Gets or sets the header template to be used if <see cref="P:DW.WPFToolkit.Controls.EnhancedListView.AllowColumnSortings"/> is set to true and the items are not sorted by a column.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedListView.AscendingSortHeaderTemplate">
            <summary>
            Gets or sets the header template to be used if <see cref="P:DW.WPFToolkit.Controls.EnhancedListView.AllowColumnSortings"/> is set to true and the items are sorted by a column in an ascending order.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedListView.DescendingSortHeaderTemplate">
            <summary>
            Gets or sets the header template to be used if <see cref="P:DW.WPFToolkit.Controls.EnhancedListView.AllowColumnSortings"/> is set to true and the items are sorted by a column in an descending order.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedListView.AllowColumnSortings">
            <summary>
            Gets or sets a value which indicates of sorting by clicking on the header is enabled or not. To have this functionality the <see cref="P:DW.WPFToolkit.Controls.EnhancedGridViewColumn.SortPropertyName"/> has to be set in the columns. For display arrows to indicate the sort direction consider setting header templates.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.BrowseTextBox">
            <summary>
            Adds a browse button to the <see cref="T:DW.WPFToolkit.Controls.EnhancedTextBox"/>.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <WPFToolkit:BrowseTextBox ShowBrowseButton="True"
                                      BrowseCommand="{Binding BrowseCommand}" />
            ]]>
            </code>
            </example>
        </member>
        <member name="T:DW.WPFToolkit.Controls.EnhancedTextBox">
            <summary>
            Enhances the <see cref="T:System.Windows.Controls.TextBox"/> by the possibilities to show background text, drop files and folders and place additional controls in.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <WPFToolkit:EnhancedTextBox InfoText="Required" AllowedDropType="Files" Separator=";" />
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnhancedTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.EnhancedTextBox"/> class.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnhancedTextBox.OnApplyTemplate">
            <summary>
            The template gets added to the control.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnhancedTextBox.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Takes care about hiding the info text in the background depending on the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoAppearance"/> property.
            </summary>
            <param name="e">The parameter passed by the caller.</param>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnhancedTextBox.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Takes care about display the info text in the background depending on the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoAppearance"/> property.
            </summary>
            <param name="e">The parameter passed by the caller.</param>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnhancedTextBox.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Takes care about display or hide the info text in the background depending on the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoAppearance"/> property.
            </summary>
            <param name="e">The parameter passed by the caller.</param>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTextBox.InfoAppearanceProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoAppearance"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoText"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextFontStyleProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextFontStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextForegroundProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextForeground"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextHorizontalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextHorizontalAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextVerticalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextVerticalAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextMarginProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextStyleProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTextBox.FirstControlProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.FirstControl"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTextBox.FirstControlPositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.FirstControlPosition"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTextBox.SecondControlProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.SecondControl"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTextBox.SecondControlPositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.SecondControlPosition"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTextBox.AllowedDropTypeProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.AllowedDropType"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTextBox.SeparatorProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.Separator"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTextBox.DragDropEffectProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.DragDropEffect"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoAppearance">
            <summary>
            Gets or sets a value which indicates when the info text in the background is shown.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoText">
            <summary>
            Gets or sets the info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextFontStyle">
            <summary>
            Gets or sets the font style of the info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextForeground">
            <summary>
            Gets or sets the foreground color of the info text shown in the background
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextHorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextVerticalAlignment">
            <summary>
            Gets or sets the vertical alignment info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextMargin">
            <summary>
            Gets or sets the margin for the info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoTextStyle">
            <summary>
            Gets or sets the style of the info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTextBox.FirstControl">
            <summary>
            Gets or sets an additional control placed inside the text box.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTextBox.FirstControlPosition">
            <summary>
            Gets or sets a value which indicates where the additional <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.FirstControl"/> has to be placed in the text box.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTextBox.SecondControl">
            <summary>
            Gets or sets an second additional control placed inside the text box.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTextBox.SecondControlPosition">
            <summary>
            Gets or sets a value which indicates where the additional <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.SecondControl"/> has to be placed in the text box.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTextBox.AllowedDropType">
            <summary>
            Gets or sets a value which indicates what the text box allows to drop in.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTextBox.Separator">
            <summary>
            Gets or sets a value which will be used as a separator if multiple elements can be dropped to the textbox. See <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.AllowedDropType"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTextBox.DragDropEffect">
            <summary>
            Gets or sets the mouse icon when files or folders (See <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.AllowedDropType"/>) will be dropped into the text box.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.BrowseTextBox.BrowseButtonContentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.BrowseTextBox.BrowseButtonContent"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.BrowseTextBox.BrowseButtonPositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.BrowseTextBox.BrowseButtonPosition"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.BrowseTextBox.BrowseButtonPaddingProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.BrowseTextBox.BrowseButtonPadding"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.BrowseTextBox.BrowseButtonMarginProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.BrowseTextBox.BrowseButtonMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.BrowseTextBox.ShowBrowseButtonProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.BrowseTextBox.ShowBrowseButton"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.BrowseTextBox.BrowseCommandProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.BrowseTextBox.BrowseCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.BrowseTextBox.BrowseCommandParameterProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.BrowseTextBox.BrowseCommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.BrowseTextBox.VerticalBrowseButtonAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.BrowseTextBox.VerticalBrowseButtonAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.BrowseTextBox.HorizontalBrowseButtonAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.BrowseTextBox.HorizontalBrowseButtonAlignment"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.BrowseTextBox.BrowseButtonContent">
            <summary>
            Gets or sets the text shown in the browse button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.BrowseTextBox.BrowseButtonPosition">
            <summary>
            Gets or sets the position where the browse button has to be placed inside the text box.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.BrowseTextBox.BrowseButtonPadding">
            <summary>
            Gets or sets the padding of the browse button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.BrowseTextBox.BrowseButtonMargin">
            <summary>
            Gets or sets the margin of the browse button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.BrowseTextBox.ShowBrowseButton">
            <summary>
            Gets or sets a value which indicates if the browse button is shown or not.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.BrowseTextBox.BrowseCommand">
            <summary>
            Gets or sets the command to be executed by the browse button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.BrowseTextBox.BrowseCommandParameter">
            <summary>
            Gets or sets the command passed by the <see cref="P:DW.WPFToolkit.Controls.BrowseTextBox.BrowseCommand"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.BrowseTextBox.VerticalBrowseButtonAlignment">
            <summary>
            Gets or sets the vertical alignment of the vertical alignment of the browse button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.BrowseTextBox.HorizontalBrowseButtonAlignment">
            <summary>
            Gets or sets the horizontal alignment of the browse button.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.CancelButton">
            <summary>
            The button which calls the cancel command in the <see cref="T:DW.WPFToolkit.Controls.SearchTextBox"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.DroppableTypes">
            <summary>
            Represents what is possible to drop into the <see cref="T:DW.WPFToolkit.Controls.EnhancedTextBox"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DroppableTypes.File">
            <summary>
            Just one file can be dropped into the <see cref="T:DW.WPFToolkit.Controls.EnhancedTextBox"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DroppableTypes.Files">
            <summary>
            Multiple files can be dropped into the <see cref="T:DW.WPFToolkit.Controls.EnhancedTextBox"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DroppableTypes.FilesFolders">
            <summary>
            Multiple files and folders can be dropped into the <see cref="T:DW.WPFToolkit.Controls.EnhancedTextBox"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DroppableTypes.Folders">
            <summary>
            Multiple folders can be dropped into the <see cref="T:DW.WPFToolkit.Controls.EnhancedTextBox"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.DroppableTypes.Folder">
            <summary>
            Just one folder can be dropped into the <see cref="T:DW.WPFToolkit.Controls.EnhancedTextBox"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.EnhancedPasswordBox">
            <summary>
            Hosts and enhances the <see cref="T:System.Windows.Controls.PasswordBox"/> to be able to bind the pasword value and show info text in the background.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <WPFToolkit:EnhancedPasswordBox Password="{Binding Password}" InfoText="Required" InfoAppearance="OnEmpty" />
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnhancedPasswordBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.EnhancedPasswordBox"/> class.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnhancedPasswordBox.OnApplyTemplate">
            <summary>
            The template gets added to the control.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnhancedPasswordBox.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Moves the focus into the inner password box if the control got the focus.
            </summary>
            <param name="e">The parameter passed by the caller.</param>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoAppearanceProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoAppearance"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoText"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextFontStyleProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextFontStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextForegroundProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextForeground"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextHorizontalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextHorizontalAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextVerticalAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextVerticalAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextMarginProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextStyleProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextStyle"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedPasswordBox.PasswordProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.Password"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoAppearance">
            <summary>
            Gets or sets a value which indicated when the info text in the background is shown.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoText">
            <summary>
            Gets or sets the info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextFontStyle">
            <summary>
            Gets or sets the font style of the info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextForeground">
            <summary>
            Gets or sets the foreground color of the info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextHorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextVerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the info text shown in the background
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextMargin">
            <summary>
            Gets or sets the margin of the info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.InfoTextStyle">
            <summary>
            Gets or sets the style of the info text shown in the background.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedPasswordBox.Password">
            <summary>
            Gets or sets the password typed in the text box.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.InfoAppearance">
            <summary>
            Defines when the <see cref="P:DW.WPFToolkit.Controls.EnhancedTextBox.InfoText"/> in the <see cref="T:DW.WPFToolkit.Controls.EnhancedTextBox"/> and its derived controls is visible.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.InfoAppearance.None">
            <summary>
            No info text has to be shown.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.InfoAppearance.OnEmpty">
            <summary>
            The info text is shown when the box is empty, no matter if it has the keyboard focus or not.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.InfoAppearance.OnLostFocus">
            <summary>
            The info text is shown when the box is empty and does not have the keyboard focus.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.SearchButton">
            <summary>
            The button which calls the search command in the <see cref="T:DW.WPFToolkit.Controls.SearchTextBox"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.SearchTextBox">
            <summary>
            Adds search and cancel buttons to the EnhancedTextBox to represent a search box shown like in the Windows explorer.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <WPFToolkit:SearchTextBox ShowSearchButton="True"
                                      SearchCommand="{Binding SearchCommand}"
                                      IsSearching="{Binding IsSearching}"
                                      CancelCommand="{Binding CancelSearchCommand}" />
            ]]>
            </code>
            </example>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SearchTextBox.SearchButtonPositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SearchTextBox.SearchButtonPosition"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SearchTextBox.SearchButtonMarginProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SearchTextBox.SearchButtonMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SearchTextBox.SearchButtonPaddingProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SearchTextBox.SearchButtonPadding"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SearchTextBox.VerticalSearchButtonAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SearchTextBox.VerticalSearchButtonAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SearchTextBox.HorizontalSearchButtonAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SearchTextBox.HorizontalSearchButtonAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SearchTextBox.ShowSearchButtonProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SearchTextBox.ShowSearchButton"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SearchTextBox.SearchCommandProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SearchTextBox.SearchCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SearchTextBox.SearchCommandParameterProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SearchTextBox.SearchCommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SearchTextBox.CancelCommandProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SearchTextBox.CancelCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SearchTextBox.CancelCommandParameterProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SearchTextBox.CancelCommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SearchTextBox.IsSearchingProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SearchTextBox.IsSearching"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SearchTextBox.SearchButtonPosition">
            <summary>
            Gets or sets a value which indicates where the search button has to be placed.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SearchTextBox.SearchButtonMargin">
            <summary>
            Gets or sets the margin of the search button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SearchTextBox.SearchButtonPadding">
            <summary>
            Gets or sets the padding of the search button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SearchTextBox.VerticalSearchButtonAlignment">
            <summary>
            Gets or sets the vertical alignment of the search button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SearchTextBox.HorizontalSearchButtonAlignment">
            <summary>
            Gets or sets the horizontal alignment of the search button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SearchTextBox.ShowSearchButton">
            <summary>
            Gets or sets a value which indicates if the search button is visible or not. This has effect on the cancel button too.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SearchTextBox.SearchCommand">
            <summary>
            Gets or sets the command to be called by the search button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SearchTextBox.SearchCommandParameter">
            <summary>
            Gets or sets the parameter to be passed when the <see cref="P:DW.WPFToolkit.Controls.SearchTextBox.SearchCommand"/> gets executed.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SearchTextBox.CancelCommand">
            <summary>
            Gets or sets the command to be called by the cancel button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SearchTextBox.CancelCommandParameter">
            <summary>
            Gets or sets the parameter to be passed when the <see cref="P:DW.WPFToolkit.Controls.SearchTextBox.CancelCommand"/> gets executed.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SearchTextBox.IsSearching">
            <summary>
            Gets or sets a value which indicates if the search or cancel button is visible. If true the cancel button is shown; otherwise the search button.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.EnhancedTreeView">
            <summary>
            Enhances the <see cref="T:System.Windows.Controls.TreeView"/> with:<br/>
            * multi select,
            * stretching of its child items over the whole width,
            * select an item by rightclick on it and
            * a two way bindable SelectedItem.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <WPFToolkit:EnhancedTreeView SelectedItems="{Binding Items}">
                                         SelectionMode="Extended">
            </WPFToolkit:EnhancedTreeView>
            
            <Controls:EnhancedTreeView ItemsSource="{Binding Folders}"
                                       SelectedElement="{Binding SelectedItem, Mode=TwoWay}"
                                       AutoExpandSelected="True">
                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding Folders}">
                        <TextBlock Text="{Binding Name}" />
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
            </Controls:EnhancedTreeView>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnhancedTreeView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.EnhancedTreeView"/> class.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnhancedTreeView.GetContainerForItemOverride">
            <summary>
            Generates a new child item container to hold in the <see cref="T:DW.WPFToolkit.Controls.EnhancedTreeView"/>.
            </summary>
            <returns>The generated child item container</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnhancedTreeView.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Checks if the item is already the correct item container. If not the <see cref="M:DW.WPFToolkit.Controls.EnhancedTreeView.GetContainerForItemOverride"/> will be used to generate the right container.
            </summary>
            <param name="item">The item to shown in the <see cref="T:DW.WPFToolkit.Controls.EnhancedTreeView"/>.</param>
            <returns>True if the item is the correct item container already.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnhancedTreeView.OnSelectedItemChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Handles the selection chaning depending on the <see cref="P:DW.WPFToolkit.Controls.EnhancedTreeView.SelectionMode"/>.
            </summary>
            <param name="e">The data passed by the caller.</param>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTreeView.SelectionModeProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTreeView.SelectionMode"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTreeView.ItemsContentStretchingProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTreeView.ItemsContentStretching"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTreeView.SelectedItemChangedCommandProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTreeView.SelectedItemChangedCommand"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTreeView.SelectedElementProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTreeView.SelectedElement"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTreeView.AutoExpandSelectedProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTreeView.AutoExpandSelected"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTreeView.SelectedItems">
            <summary>
            Gets all selected items in the tree view. If nothing is selected an empty list is returned.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTreeView.SelectedTreeViewItems">
            <summary>
            Gets the selected tree view item container.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTreeView.SelectionMode">
            <summary>
            Gets or set a value which indicates how items can be selected in the tree view.
            </summary>
            <remarks>The default value is SelectionMode.Extended</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTreeView.ItemsContentStretching">
            <summary>
            Gets or sets a value which indicates of the child tree view items should be stretched over the whole control width or not.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTreeView.SelectedItemChangedCommand">
            <summary>
            Gets or sets the command to be executed if a item got selected.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTreeView.SelectedElement">
            <summary>
            Gets or sets the selected item in the tree.
            </summary>
            <remarks>The parent elements will not be expanded automatically. Check <see cref="P:DW.WPFToolkit.Controls.EnhancedTreeView.AutoExpandSelected"/> for try to expand them.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTreeView.AutoExpandSelected">
            <summary>
            Gets or sets a value which indicates if the TreeViewItems gets expanded automatically to the selected item when using <see cref="P:DW.WPFToolkit.Controls.EnhancedTreeView.SelectedElement"/>.
            </summary>
            <remarks>This works only if the items are not virtualized or were visible already.<br/>
            In ItemsPanelTemplate usually a VirtualizingStackPanel is used, then the TreeViewItems gets created only after expanding the parent.<br/>
            With overriding the ItemsPanel with a normal StackPanel all container should get created directly, but then the performance will suffer depending an the amount of items.<br/>
            <br/>
            The default value is false.</remarks>
        </member>
        <member name="T:DW.WPFToolkit.Controls.EnhancedTreeViewItem">
            <summary>
            Enhances the <see cref="T:System.Windows.Controls.TreeViewItem"/> to be used in the <see cref="T:DW.WPFToolkit.Controls.EnhancedTreeView"/>.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnhancedTreeViewItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.EnhancedTreeViewItem"/> class.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnhancedTreeViewItem.GetContainerForItemOverride">
            <summary>
            Generates a new child item container to hold in the <see cref="T:DW.WPFToolkit.Controls.EnhancedTreeViewItem"/>.
            </summary>
            <returns>The generated child item container</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnhancedTreeViewItem.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Checks if the item is already the correct item container. If not the <see cref="M:DW.WPFToolkit.Controls.EnhancedTreeViewItem.GetContainerForItemOverride"/> will be used to generate the right container.
            </summary>
            <param name="item">The item to shown in the <see cref="T:DW.WPFToolkit.Controls.EnhancedTreeViewItem"/>.</param>
            <returns>True if the item is the correct item container already.</returns>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnhancedTreeViewItem.ContentStretchingProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnhancedTreeViewItem.ContentStretching"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnhancedTreeViewItem.ContentStretching">
            <summary>
            Gets or sets a value which is indicating if the current item should be stretched over the whole width of the tree view or not.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.EnumDescriptionConverter">
            <summary>
            Returns the description of a given enum value.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnumDescriptionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Takes the value and tries to cast it to System.Enum to read it description attribute.
            </summary>
            <param name="value">The enum value which description should be read.</param>
            <param name="targetType">This parameter is not used.</param>
            <param name="parameter">This parameter is not used.</param>
            <param name="culture">This parameter is not used.</param>
            <returns>The description text of the enum value if any; the enum name as a string. If the parameter is not an System.Enum it returns string.Empty</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnumDescriptionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">This parameter is not used.</param>
            <param name="targetType">This parameter is not used.</param>
            <param name="parameter">This parameter is not used.</param>
            <param name="culture">This parameter is not used.</param>
            <returns>nothing</returns>
            <exception cref="T:System.NotImplementedException">The convert back is not intended to be used.</exception>
        </member>
        <member name="T:DW.WPFToolkit.Controls.EnumDisplayKind">
            <summary>
            Defines how the enum values in the <see cref="T:DW.WPFToolkit.Controls.EnumerationComboBox"/> will be displayed.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnumDisplayKind.ToString">
            <summary>
            The enum value will be display with just .ToString().
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnumDisplayKind.Description">
            <summary>
            The description of the enum value will be read using the <see cref="T:DW.WPFToolkit.Controls.EnumDescriptionConverter"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnumDisplayKind.Converter">
            <summary>
            The bound <see cref="P:DW.WPFToolkit.Controls.EnumerationComboBox.ItemConverter"/> will be used to convert the value into the variable to show.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnumDisplayKind.Custom">
            <summary>
            The EnumerationComboBox.ItemTemplate will be set from outside of the control manually.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.EnumerationComboBox">
            <summary>
            Represents a ComboBox which takes an enumeration value and shows all possible states inside the dropdown menu for let choosing a value.
            </summary>
            <example>
            In the example the data shown in C# is the base the UI is binding to. See the XAML tab for the control usages.
            <code lang="csharp">
            <![CDATA[
            public enum Number
            {
                [Description("The Number One")]
                One,
            
                [Description("The Number Two")]
                Two,
            
                [Description("The Number Three")]
                Three
            }
            
            public class MainViewModel : ObservableObject
            {
                public MainViewModel()
                {
                    Number = Number.One;
                }
            
                public Number Number
                {
                    get { return _number; }
                    set
                    {
                        _number = value;
                        NotifyPropertyChanged("Number");
                    }
                }
                private Number _number;
            }
            ]]>
            </code>
            <code lang="xaml">
            <![CDATA[
            <!-- The items will be shown like "Name: One; Description: The Number One". -->
            <!-- (The DW.WPFToolkit.Controls.EnumDescriptionConverter will return the description value unchanged) -->
            <!-- DisplayKind is not set so the default will be taken which is EnumDisplayKind.Custom -->
            <Controls:EnumerationComboBox EnumType="{x:Type Demo:Number}" SelectedItem="{Binding Number}">
                <Controls:EnumerationComboBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Name: " />
                            <TextBlock Text="{Binding }" />
                            <TextBlock Text="; Description: " />
                            <TextBlock Text="{Binding Converter={StaticResource EnumDescriptionConverter}}" />
                        </StackPanel>
                    </DataTemplate>
                </Controls:EnumerationComboBox.ItemTemplate>
            </Controls:EnumerationComboBox>
                
            <!-- The items will be shown like "The Number One". -->
            <Controls:EnumerationComboBox EnumType="{x:Type Demo:Number}" SelectedItem="{Binding Number}" DisplayKind="Description" />
            
            <!-- The items will be shown like "One". -->    
            <Controls:EnumerationComboBox EnumType="{x:Type Demo:Number}" SelectedItem="{Binding Number}" DisplayKind="ToString" />
                
            <!-- The items will be shown how you defined in the EnumToStringConverter. -->
            <Controls:EnumerationComboBox EnumType="{x:Type Demo:Number}" SelectedItem="{Binding Number}" DisplayKind="Converter" ItemConverter="{StaticResource EnumToStringConverter}" />
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnumerationComboBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.EnumerationComboBox"/> class.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnumerationComboBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Checks if the item is already the correct item container. If not the <see cref="M:DW.WPFToolkit.Controls.EnumerationComboBox.GetContainerForItemOverride"/> will be used to generate the right container.
            </summary>
            <param name="item">The item to shown in the <see cref="T:DW.WPFToolkit.Controls.EnumerationComboBox"/>.</param>
            <returns>True if the item is the correct item container already.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.EnumerationComboBox.GetContainerForItemOverride">
            <summary>
            Generates a new child item container to hold in the <see cref="T:DW.WPFToolkit.Controls.EnumerationComboBox"/>.
            </summary>
            <returns>The generated child item container.</returns>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnumerationComboBox.EnumTypeProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnumerationComboBox.EnumType"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnumerationComboBox.DisplayKindProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnumerationComboBox.DisplayKind"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.EnumerationComboBox.ItemConverterProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.EnumerationComboBox.ItemConverter"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnumerationComboBox.EnumType">
            <summary>
            Gets or sets the type of the enum which named can be selected from.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnumerationComboBox.DisplayKind">
            <summary>
            Gets or sets the way hot to display the items in the drop down or in the selection box itself.
            </summary>
            <remarks>The default is <see cref="F:DW.WPFToolkit.Controls.EnumDisplayKind.Custom"/> which means you have to define the EnumerationComboBox.ItemTemplate by yourself.</remarks>
            <remarks>Note: When <see cref="F:DW.WPFToolkit.Controls.EnumDisplayKind.Custom"/> is set you need to set the <see cref="P:DW.WPFToolkit.Controls.EnumerationComboBox.ItemConverter"/> as well; otehrwise <see cref="F:DW.WPFToolkit.Controls.EnumDisplayKind.ToString"/> will be used as a default.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.EnumerationComboBox.ItemConverter">
            <summary>
            Gets or sets the converter to use when <see cref="F:DW.WPFToolkit.Controls.EnumDisplayKind.Custom"/> is set as the <see cref="P:DW.WPFToolkit.Controls.EnumerationComboBox.DisplayKind"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.EnumerationComboBoxItem">
            <summary>
            Represents an item inside the <see cref="T:DW.WPFToolkit.Controls.EnumerationComboBox"/> which holds the appropriate enumeration object.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.ImageButton">
            <summary>
            Enhances the <see cref="T:System.Windows.Controls.Button"/> to show an disabled image. The bound image will be shown monochrome if the button is disabled.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <UniformGrid Rows="1" DockPanel.Dock="Bottom" HorizontalAlignment="Center">
            
                <Toolkit:ImageButton Content="Back"
                                     ImageSource="/MyAssembly;component/Data/Previous.png" />
            
                <Toolkit:ImageButton Content="Next"
                                     ImageSource="/MyAssembly.Demo;component/Data/Next.png" 
                                     ImagePosition="Right"
                                     ImageMargin="4,0,0,0" />
            
                <Toolkit:ImageButton Content="Finish"
                                     IsEnabled="False"
                                     ImageSource="/MyAssembly;component/Data/OK.png" />
            
                <Toolkit:ImageButton Content="Cancel"
                                     ImageSource="/MyAssembly;component/Data/Cancel.png" />
            
            </UniformGrid>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ImageButton.ImageSourceProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.ImageButton.ImageSource"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ImageButton.DisabledImageSourceProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.ImageButton.DisabledImageSource"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ImageButton.ImageWidthProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.ImageButton.ImageWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ImageButton.ImageHeightProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.ImageButton.ImageHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ImageButton.ImageMarginProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.ImageButton.ImageMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ImageButton.ImagePositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.ImageButton.ImagePosition"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ImageButton.HorizontalImageAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.ImageButton.HorizontalImageAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ImageButton.VerticalImageAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.ImageButton.VerticalImageAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ImageButton.ImageStretchProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.ImageButton.ImageStretch"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.ImageButton.ImageSource">
            <summary>
            Gets or sets the source if the button image.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.ImageButton.DisabledImageSource">
            <summary>
            Gets or sets the image to be used when the button is disabled. This will set internaly by the <see cref="P:DW.WPFToolkit.Controls.ImageButton.ImageSource"/> to a monochrome image.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.ImageButton.ImageWidth">
            <summary>
            Gets or sets the width of the image shown in the button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.ImageButton.ImageHeight">
            <summary>
            Gets or sets the height of the image shown in the button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.ImageButton.ImageMargin">
            <summary>
            Gets or sets the margin of the image shown in the button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.ImageButton.ImagePosition">
            <summary>
            Gets or sets a value that indicates where the image have to be placed in the button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.ImageButton.HorizontalImageAlignment">
            <summary>
            Gets or sets the horizontal alignment of the image shown in the button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.ImageButton.VerticalImageAlignment">
            <summary>
            Gets or sets the vertical alignment of the image shown in the button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.ImageButton.ImageStretch">
            <summary>
            Gets or sets a value that indicated how the image have to be stretched in the button.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.ExpansionMode">
            <summary>
            Defines how items can be expanded in the <see cref="T:DW.WPFToolkit.Controls.NavigationBar"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ExpansionMode.Single">
            <summary>
            Just one item can be expanded at once; all other got closed.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ExpansionMode.Multiple">
            <summary>
            Its allowed to open multiple items which shared the available space.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.NavigationBar">
            <summary>
            A control which shows a bunch of items which can be expanded and collapsed. All expanded items shares the available space left.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <WPFToolkit:NavigationBar AllowMultiExpandings="True">
            
                <WPFToolkit:NavigationBarItem IsExpanded="True" Header="First">
                    <ListBox />
                </WPFToolkit:NavigationBarItem>
            
                <WPFToolkit:NavigationBarItem Header="Second">
                    <ListBox />
                </WPFToolkit:NavigationBarItem>
            
                <WPFToolkit:NavigationBarItem Header="Third">
                    <ListBox />
                </WPFToolkit:NavigationBarItem>
            
            </WPFToolkit:NavigationBar>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.NavigationBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.NavigationBar"/> class.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.NavigationBar.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Checks if the item is already the correct item container. If not the <see cref="M:DW.WPFToolkit.Controls.NavigationBar.GetContainerForItemOverride"/> will be used to generate the right container.
            </summary>
            <param name="item">The item to shown in the <see cref="T:DW.WPFToolkit.Controls.NavigationBarItem"/>.</param>
            <returns>True if the item is the correct item container already.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.NavigationBar.GetContainerForItemOverride">
            <summary>
            Generates a new child item container to hold in the <see cref="T:DW.WPFToolkit.Controls.NavigationBar"/>.
            </summary>
            <returns>The generated child item container</returns>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NavigationBar.ContentStringFormatProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NavigationBar.ContentStringFormat"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NavigationBar.ContentTemplateProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NavigationBar.ContentTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NavigationBar.ContentTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NavigationBar.ContentTemplateSelector"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NavigationBar.ExpansionModeProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NavigationBar.ExpansionMode"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NavigationBar.ExpandedItemIndexesProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NavigationBar.ExpandedItemIndexes"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NavigationBar.OrientationProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NavigationBar.Orientation"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NavigationBar.ContentStringFormat">
            <summary>
            Gets or sets the content string format.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NavigationBar.ContentTemplate">
            <summary>
            Gets or sets the content template
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NavigationBar.ContentTemplateSelector">
            <summary>
            Gets or sets the content template selector.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NavigationBar.ExpansionMode">
            <summary>
            Gets or sets a value which indicates how items can be expanded.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NavigationBar.ExpandedItemIndexes">
            <summary>
            Gets or sets a comma separated value of item indexes which are expanded on default.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NavigationBar.Orientation">
            <summary>
            Gets or sets a value which indicates the orientation of the NavigationBar.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.NavigationBarHeaderBar">
            <summary>
            Represents the header of the <see cref="T:DW.WPFToolkit.Controls.NavigationBarItem"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NavigationBarHeaderBar.IsCheckedProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NavigationBarHeaderBar.IsChecked"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NavigationBarHeaderBar.IsChecked">
            <summary>
            Gets or sets a value which indicates if the item is expanded or not.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.NavigationBarItem">
            <summary>
            Represents a single item hostet in the <see cref="T:DW.WPFToolkit.Controls.NavigationBar"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NavigationBarItem.IsExpandedProperty">
            <summary>IsExpanded
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NavigationBarItem.IsExpanded"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NavigationBarItem.OrientationProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NavigationBarItem.Orientation"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NavigationBarItem.ExpandedEvent">
            <summary>
            Identifies the <see cref="E:DW.WPFToolkit.Controls.NavigationBarItem.Expanded"/> routed event.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NavigationBarItem.CollapsedEvent">
            <summary>
            Identifies the <see cref="E:DW.WPFToolkit.Controls.NavigationBarItem.Collapsed"/> routed event.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NavigationBarItem.IsExpanded">
            <summary>
            Gets or sets a value that indicates of the item is expanded or not.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NavigationBarItem.Orientation">
            <summary>
            Gets or set the orientation of the item hosted in the <see cref="T:DW.WPFToolkit.Controls.NavigationBar"/>.
            </summary>
        </member>
        <member name="E:DW.WPFToolkit.Controls.NavigationBarItem.Expanded">
            <summary>
            Occurs when the item got expanded.
            </summary>
        </member>
        <member name="E:DW.WPFToolkit.Controls.NavigationBarItem.Collapsed">
            <summary>
            Occurs when the item got collapsed.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.NavigationBarPanel">
            <summary>
            The panel which is used in the <see cref="T:DW.WPFToolkit.Controls.NavigationBar"/> which arranges the <see cref="T:DW.WPFToolkit.Controls.NavigationBarItem"/>s.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.NavigationBarPanel.GetIsExpanded(System.Windows.DependencyObject)">
            <summary>
            Gets the value which indicates if a item hosted in the NavigationBarPanel is expanded or not.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Controls.NavigationBarPanel.IsExpanded property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.NavigationBarPanel.SetIsExpanded(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attaches the value which indicates if a item hosted in the NavigationBarPanel is expanded or not.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Controls.NavigationBarPanel.IsExpanded value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NavigationBarPanel.IsExpandedProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Controls.NavigationBarPanel.GetIsExpanded(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Controls.NavigationBarPanel.SetIsExpanded(System.Windows.DependencyObject,System.Boolean)"/> attached property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NavigationBarPanel.OrientationProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NavigationBarPanel.Orientation"/> dependency property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.NavigationBarPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Lets each child calculating is needed size.
            </summary>
            <param name="constraint">The available space by the parent control.</param>
            <returns>The calculated size needed for the control.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.NavigationBarPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positionates each child in the available space of the NavigationBar depending on the expanding states.
            </summary>
            <param name="arrangeSize">The maximum possible space given by the parent control.</param>
            <returns>The calculated needed space in sum of all available child controls.</returns>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NavigationBarPanel.Orientation">
            <summary>
            Gets or sets the orientation of the NavigationBarPanel.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.NavigationBarToggleButton">
            <summary>
            Represents the button to be clicked in the <see cref="T:DW.WPFToolkit.Controls.NavigationBarHeaderBar"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.LostFocusBehavior">
            <summary>
            Defines the actions which should be done when the <see cref="T:DW.WPFToolkit.Controls.NumberBox"/> losts the focus.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.LostFocusBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.LostFocusBehavior"/> class.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.LostFocusBehavior.#ctor(DW.WPFToolkit.Controls.ValueBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.LostFocusBehavior"/> class.
            </summary>
            <param name="value">The behavior for the input value when null.</param>
        </member>
        <member name="M:DW.WPFToolkit.Controls.LostFocusBehavior.ProvideValue(System.IServiceProvider)">
            <summary>
            Returns the object with its configured behaviors.
            </summary>
            <param name="serviceProvider">Not Used</param>
            <returns>The object with its configured behaviors.</returns>
        </member>
        <member name="P:DW.WPFToolkit.Controls.LostFocusBehavior.Value">
            <summary>
            Gets or sets the behavior to be applied to the NumberBox value when it its empty (null).
            </summary>
            <remarks>Default value is ValueBehavior.None.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.LostFocusBehavior.TrimLeadingZero">
            <summary>
            Gets or sets a value that indicates if leading zero's should be trimmed from the value or not.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.LostFocusBehavior.FormatText">
            <summary>
            Gets or sets the format text (string.Format) to be applied to the text.
            </summary>
            <remarks>The default value is null. No format.</remarks>
        </member>
        <member name="T:DW.WPFToolkit.Controls.NumberBox">
            <summary>
            Displays a <see cref="T:System.Windows.Controls.TextBox"/> to accept numeric values only, so the text can be bound to a numeric property direclty without converting.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <!-- Many properties are set only for display the possibilities -->
            <Toolkit:NumberBox NumberType="Double"
                               
                               Number="{Binding MyDoubleValue}"
                               Minimum="-12.5"
                               Maximum="55.5"
                               DefaultNumber="5"
                               
                               ShowCurrency="True"
                               Currency="€"
                               CurrencyPosition="Right"
                               
                               HasCheckBox="True"
                               CheckBoxBehavior="EnableIfChecked"
                               IsChecked="{Binding MyDoubleValueIsChecked}"
                               CheckBoxPosition="Left"
                               
                               UpDownBehavior="ArrowsAndButtons"
                               Step="0.5"
                               UpDownButtonsPosition="Right"
                               
                               NumberSelectionBehavior="OnFocusAndUpDown"
                               
                               LostFocusBehavior="{Toolkit:LostFocusBehavior PlaceDefaultNumber, TrimLeadingZero=True, FormatText={}{0:D2}}"
                               
                               PredefinesCulture="en-US" />
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.NumberBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.NumberBox"/> class.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.NumberTypeProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.NumberType"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.NumberProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.Number"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.MinimumProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.Minimum"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.MaximumProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.Maximum"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.UnitProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.Unit"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.UnitPositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.UnitPosition"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.HasCheckBoxProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.HasCheckBox"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.IsCheckedProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.IsChecked"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.CheckBoxBehaviorProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.CheckBoxBehavior"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.CheckBoxPositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.CheckBoxPosition"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.UpDownBehaviorProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.Step"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.StepProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.Step"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.UpDownButtonsPositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.UpDownButtonsPosition"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.CanStepUpProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.CanStepUp"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.CanStepDownProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.CanStepDown"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.HasResetButtonProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.HasResetButton"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.DefaultNumberProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.DefaultNumber"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.ResetButtonPositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.ResetButtonPosition"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.CanResetProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.CanReset"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.NumberSelectionBehaviorProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.NumberSelectionBehavior"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.LostFocusBehaviorProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.LostFocusBehavior"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.InputCultureProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.InputCulture"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.PredefinesCultureProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.PredefinesCulture"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.NumberChangedEvent">
            <summary>
            Identifies the <see cref="E:DW.WPFToolkit.Controls.NumberBox.NumberChanged"/> routed event.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.IsReadOnlyProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.IsReadOnly"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBox.AcceptUpDownOnNullProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.NumberBox.AcceptUpDownOnNull"/> dependency property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.NumberBox.OnApplyTemplate">
            <summary>
            The template gets added to the control.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.NumberType">
            <summary>
            Gets or sets the type of number to be supported in the NumberBox.
            </summary>
            <remarks>Default value is <see cref="F:DW.WPFToolkit.Controls.NumberType.Int"/>.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.Number">
            <summary>
            Gets or sets the number value. It can be any of the <see cref="T:DW.WPFToolkit.Controls.NumberType"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.Minimum">
            <summary>
            Gets or sets the minimum value to be written into the NumberBox.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.Maximum">
            <summary>
            Gets or sets the maximum value to be written into the NumberBox.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.Unit">
            <summary>
            Gets or sets the unit.
            </summary>
            <remarks>Default value is null. The unit is collapsed then.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.UnitPosition">
            <summary>
            Gets or sets the position of the unit within the NumberBox.
            </summary>
            <remarks>Default value is Dock.Right.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.HasCheckBox">
            <summary>
            Gets or sets the value which indicates if a checkbox is shown in the NumberBox.
            </summary>
            <remarks>Default value is false</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.IsChecked">
            <summary>
            Gets or sets the value which indicates of the checkbox is checked.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.CheckBoxBehavior">
            <summary>
            Gets or sets the behavior of the checkbox.
            </summary>
            <remarks>Default value is NumberBoxCheckBoxBehavior.None</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.CheckBoxPosition">
            <summary>
            Gets or sets the position of the checkbox.
            </summary>
            <remarks>Default value is Dock.Left.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.UpDownBehavior">
            <summary>
            Gets or sets the possibilies how the values can be incremented or decremented.
            </summary>
            <remarks>Default value is UpDownBehavior.None.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.Step">
            <summary>
            Gets or sets the step width to be used when increment the value by the buttons or arrow keys.
            </summary>
            <remarks>The default value will be 1 (or 1.0 for numbers with decimal places)</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.UpDownButtonsPosition">
            <summary>
            Gets or sets the position of the up/down buttons.
            </summary>
            <remarks>Default value is Dock.Right.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.CanStepUp">
            <summary>
            Gets or sets a value which indicates if the current number can step up.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.CanStepDown">
            <summary>
            Gets or sets a value which indicates if the current number can step down.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.HasResetButton">
            <summary>
            Gets or sets a value which indicates if the NumberBox has a cancel 'X' button.
            </summary>
            <remarks>Default value is false.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.DefaultNumber">
            <summary>
            Gets or sets the default value to place in when the "ResetButton" (See <see cref="P:DW.WPFToolkit.Controls.NumberBox.HasResetButton"/>) is clicked.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.ResetButtonPosition">
            <summary>
            Gets or sets the position of the reset button within the NumberBox.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.CanReset">
            <summary>
            Gets or sets a value which indicates if the reset button can be clicked.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.NumberSelectionBehavior">
            <summary>
            Gets or sets a value that defines when the number should be selected automatically.
            </summary>
            <remarks>The default behavior is NumberBoxSelection.None.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.LostFocusBehavior">
            <summary>
            Gets or sets the bavior to be applied to the number and/or text when the NumberBox lost its focus.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.InputCulture">
            <summary>
            Gets or sets the culture to be used to parse the user input.
            </summary>
            <remarks>If not set CultureInfo.CurrentUICulture will be used.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.PredefinesCulture">
            <summary>
            Gets or sets the culture to be used to parse the value defined in the xaml file like <see cref="P:DW.WPFToolkit.Controls.NumberBox.Minimum"/>, <see cref="P:DW.WPFToolkit.Controls.NumberBox.Maximum"/> and <see cref="P:DW.WPFToolkit.Controls.NumberBox.DefaultNumber"/>.
            </summary>
            <remarks>If not set CultureInfo.CurrentUICulture will be used.</remarks>
        </member>
        <member name="E:DW.WPFToolkit.Controls.NumberBox.NumberChanged">
            <summary>
            Occurs when the Numvber value has been changed.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.IsReadOnly">
            <summary>
            Gets or sets a value if the textbox is shown read only.
            </summary>
            <remarks>The default is false.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberBox.AcceptUpDownOnNull">
            <summary>
            Gets or sets a value which indicates if increment and decrement is possible even if the value is null. Minimum or maximum then will be placed in.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="T:DW.WPFToolkit.Controls.NumberBoxCheckBoxBehavior">
            <summary>
            Defines what should happen to the  <see cref="T:DW.WPFToolkit.Controls.NumberBox"/> if the internal checkbox is checked.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBoxCheckBoxBehavior.None">
            <summary>
            Nothing happens internally.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBoxCheckBoxBehavior.DisableIfChecked">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.NumberBox"/> input field is disabled if the box is checked.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBoxCheckBoxBehavior.EnableIfChecked">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.NumberBox"/> input field is enabled if the box is checked.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.NumberBoxSelection">
            <summary>
            Defines how the automatic selection of the number in the <see cref="T:DW.WPFToolkit.Controls.NumberBox"/> should behave.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBoxSelection.None">
            <summary>
            No automatic selection will be done.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBoxSelection.OnFocus">
            <summary>
            The number gets selected when the NumberBox got the focus.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBoxSelection.OnUpDown">
            <summary>
            The number will be selected when increment or decrement the value using arrow keys or up/down buttons.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberBoxSelection.OnFocusAndUpDown">
            <summary>
            The number will be selected when the NumberBox got the focus or the value gets incremented or decremented using the arrow keys or up/down buttons.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.NumberChangedEventArgs">
            <summary>
            Holds the data passed when a <see cref="T:DW.WPFToolkit.Controls.NumberBox"/> has changed its value.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberChangedEventArgs.OldNumber">
            <summary>
            Gets the old number.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.NumberChangedEventArgs.NewNumber">
            <summary>
            Gets the new number
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.NumberCheckBox">
            <summary>
            Represents the check box shown in the <see cref="T:DW.WPFToolkit.Controls.NumberBox"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.NumberUnitLabel">
            <summary>
            Represents the currency symbol shown in the <see cref="T:DW.WPFToolkit.Controls.NumberBox"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.NumberResetButton">
            <summary>
            Represents the reset to default button shown in the <see cref="T:DW.WPFToolkit.Controls.NumberBox"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.NumberType">
            <summary>
            Defines which kind of numbers the <see cref="T:DW.WPFToolkit.Controls.NumberBox"/> is accepting.
            </summary>
            <remarks>
            Number type references:<br/>
            <a href="https://msdn.microsoft.com/en-us/library/exx3b86w.aspx">Integral Types Table</a><br/>
            <a href="https://msdn.microsoft.com/en-us/library/9ahet949.aspx">Floating-Point Types Table</a><br/>
            <a href="https://msdn.microsoft.com/en-us/library/364x0z75.aspx">Decimal</a><br/>
            <a href="https://msdn.microsoft.com/de-de/library/vstudio/system.numerics.biginteger(v=vs.100)">System.Numerics.BigInteger Structure</a>
            </remarks>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberType.SByte">
            <summary>
            Represents sbyte or sbyte?.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberType.Byte">
            <summary>
            Represents byte or byte?.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberType.Short">
            <summary>
            Represents short or short?.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberType.UShort">
            <summary>
            Represents ushort or ushort?.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberType.Int">
            <summary>
            Represents int or int?.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberType.UInt">
            <summary>
            Represents uint or uint?.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberType.Long">
            <summary>
            Represents long or long?.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberType.ULong">
            <summary>
            Represents ulong or ulong?.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberType.BigInteger">
            <summary>
            Represents BigInteger or BigInteger?.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberType.Float">
            <summary>
            Represents float or float?.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberType.Double">
            <summary>
            Represents double or double?.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.NumberType.Decimal">
            <summary>
            Represents decimal or decimal?.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.UpDownBehavior">
            <summary>
            Defines how the value in the <see cref="T:DW.WPFToolkit.Controls.NumberBox"/> can incremented or decremented.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.UpDownBehavior.None">
            <summary>
            The NumberBox doesn't have any up/down.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.UpDownBehavior.Arrows">
            <summary>
            The value can incremented or decremented by the arrow keys only.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.UpDownBehavior.Buttons">
            <summary>
            The value can incremented or decremented by the up/down buttons only.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.UpDownBehavior.ArrowsAndButtons">
            <summary>
            The value can incremented or decremented by the arrow keys and up/down buttons.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.UpDownButton">
            <summary>
            Represents a up or down button shown in the <see cref="T:DW.WPFToolkit.Controls.NumberBox"/> control.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.UpDownButton.DirectionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.UpDownButton.Direction"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.UpDownButton.Direction">
            <summary>
            Gets or sets a value which indicates in which direction the button is pointing to.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.UpDownDirections">
            <summary>
            Represents the direction to be used for the up and down button in the <see cref="T:DW.WPFToolkit.Controls.NumberBox"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.UpDownDirections.Up">
            <summary>
            The button means step up.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.UpDownDirections.Down">
            <summary>
            The button means step down.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.ValueBehavior">
            <summary>
            Defines what the <see cref="T:DW.WPFToolkit.Controls.NumberBox"/> should do when it lose the focus without a value (null).
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ValueBehavior.None">
            <summary>
            Nothing should be done, the value stays on null.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ValueBehavior.PlaceDefaultNumber">
            <summary>
            The default number defined by <see cref="P:DW.WPFToolkit.Controls.NumberBox.DefaultNumber"/> will be placed in.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ValueBehavior.PlaceMinimumNumber">
            <summary>
            The minimum value of the number type will be placed in.
            </summary>
            <remarks>For BigInteger there is no minimum, it stays on null.</remarks>
        </member>
        <member name="F:DW.WPFToolkit.Controls.ValueBehavior.PlaceMaximumNumber">
            <summary>
            The maximum value of the number type will be placed in.
            </summary>
            <remarks>For BigInteger there is no maximum, it stays on null.</remarks>
        </member>
        <member name="T:DW.WPFToolkit.Controls.NumberChangedEventHandler">
            <summary>
            The event handler for the <see cref="E:DW.WPFToolkit.Controls.NumberBox.NumberChanged"/> event.
            </summary>
            <param name="sender">The corresponding NumberBox.</param>
            <param name="e">The object with the old and new number.</param>
        </member>
        <member name="T:DW.WPFToolkit.Controls.PagingControl">
            <summary>
            Brings the possibility to show several pages one by one. This is possible by slide through the pages using navigation buttons or jump to a page directly.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <WPFToolkit:PagingControl LoopItems="False"
                                      SelectedIndex="0"
                                      ShowJumpBar="True">
                <WPFToolkit:PagingItem Header="First Header Text" Footer="First Footer Text">
                    <ListBox />
                </WPFToolkit:PagingItem>
            
                <WPFToolkit:PagingItem Header="Second Header Text" Footer="Second Footer Text">
                    <ListBox />
                </WPFToolkit:PagingItem>
            
                <WPFToolkit:PagingItem Header="Third Header Text" Footer="Third Footer Text">
                    <ListBox />
                </WPFToolkit:PagingItem>
            </WPFToolkit:PagingControl>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.PagingControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.PagingControl"/> class.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.PagingControl.ButtonItemsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.PagingControl.ButtonItems"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.PagingControl.ShowJumpBarProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.PagingControl.ShowJumpBar"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.PagingControl.PreviousBarPositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.PagingControl.PreviousBarPosition"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.PagingControl.NextBarPositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.PagingControl.NextBarPosition"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.PagingControl.JumpBarPositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.PagingControl.JumpBarPosition"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.PagingControl.HorizontalNavigationButtonsAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.PagingControl.HorizontalNavigationButtonsAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.PagingControl.VerticalNavigationButtonsAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.PagingControl.VerticalNavigationButtonsAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.PagingControl.HasSlideAnimationProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.PagingControl.HasSlideAnimation"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.PagingControl.AnimationSpeedProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.PagingControl.AnimationSpeed"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.PagingControl.AnimationOrientationProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.PagingControl.AnimationOrientation"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.PagingControl.LoopItemsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.PagingControl.LoopItems"/> dependency property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.PagingControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Recreates the jump bar items hold in the <see cref="P:DW.WPFToolkit.Controls.PagingControl.ButtonItems"/> property as soon the items collection changes.
            </summary>
            <param name="e">The parameter passed by the caller.</param>
        </member>
        <member name="M:DW.WPFToolkit.Controls.PagingControl.GetContainerForItemOverride">
            <summary>
            Generates a new child item container to hold in the <see cref="T:DW.WPFToolkit.Controls.PagingControl"/>.
            </summary>
            <returns>The generated child item container</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.PagingControl.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Checks if the item is already the correct item container. If not the <see cref="M:DW.WPFToolkit.Controls.PagingControl.GetContainerForItemOverride"/> will be used to generate the right container.
            </summary>
            <param name="item">The item to shown in the <see cref="T:DW.WPFToolkit.Controls.PagingControl"/>.</param>
            <returns>True if the item is the correct item container already.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.PagingControl.OnApplyTemplate">
            <summary>
            The template gets added to the control.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.PagingControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Switches the current displayed page. If <see cref="P:DW.WPFToolkit.Controls.PagingControl.HasSlideAnimation"/> is set to true the animation starts.
            </summary>
            <param name="e">The parameter passed by the owner.</param>
        </member>
        <member name="P:DW.WPFToolkit.Controls.PagingControl.ButtonItems">
            <summary>
            Gets or sets the button items used in the <see cref="T:DW.WPFToolkit.Controls.PagingJumpBar"/>. This is used internally.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.PagingControl.ShowJumpBar">
            <summary>
            Gets or sets a value that indicates if the direct jump bar is visible or not.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.PagingControl.PreviousBarPosition">
            <summary>
            Gets or sets a value that indicates where the previous page button is placed.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.PagingControl.NextBarPosition">
            <summary>
            Gets or sets a value that indicates where the next page button is placed.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.PagingControl.JumpBarPosition">
            <summary>
            Gets or sets a value that indicates where the direct jump bar have to be placed.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.PagingControl.HorizontalNavigationButtonsAlignment">
            <summary>
            Gets or sets the horizontal alignment of the previous and next page buttons.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.PagingControl.VerticalNavigationButtonsAlignment">
            <summary>
            Gets or sets the vertical alignment of the previous and next page buttons.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.PagingControl.HasSlideAnimation">
            <summary>
            Gets or sets a value that indicates if switching to another page has a slide animation.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.PagingControl.AnimationSpeed">
            <summary>
            Gets or sets the slide animation speed to be used if <see cref="P:DW.WPFToolkit.Controls.PagingControl.HasSlideAnimation"/> is set to true.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.PagingControl.AnimationOrientation">
            <summary>
            Gets or sets the slide animation direction to be used if <see cref="P:DW.WPFToolkit.Controls.PagingControl.HasSlideAnimation"/> is set to true.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.PagingControl.LoopItems">
            <summary>
            Gets or sets a value that indicates if the first page should be shown as the next page of the last and backward.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.PagingItem">
            <summary>
            Holds a specific page in the <see cref="T:DW.WPFToolkit.Controls.PagingControl"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.PagingItem.FooterProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.PagingItem.Footer"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.PagingItem.FooterTemplateProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.PagingItem.FooterTemplate"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.PagingItem.Footer">
            <summary>
            Gets or sets the footer to show in the page.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.PagingItem.FooterTemplate">
            <summary>
            Gets or sets the data template to be used for the <see cref="P:DW.WPFToolkit.Controls.PagingItem.Footer"/> in the page.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.PagingJumpBar">
            <summary>
            Holds all created <see cref="T:DW.WPFToolkit.Controls.PagingJumpBarItem"/> shown in the <see cref="T:DW.WPFToolkit.Controls.PagingControl"/>.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.PagingJumpBar.GetContainerForItemOverride">
            <summary>
            Generates a new child item container to hold in the <see cref="T:DW.WPFToolkit.Controls.PagingJumpBar"/>.
            </summary>
            <returns>The generated child item container</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.PagingJumpBar.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Checks if the item is already the correct item container. If not the <see cref="M:DW.WPFToolkit.Controls.PagingJumpBar.GetContainerForItemOverride"/> will be used to generate the right container.
            </summary>
            <param name="item">The item to shown in the <see cref="T:DW.WPFToolkit.Controls.PagingJumpBar"/>.</param>
            <returns>True if the item is the correct item container already.</returns>
        </member>
        <member name="T:DW.WPFToolkit.Controls.PagingJumpBarItem">
            <summary>
            Represents a button to jump directly to a page shown in the <see cref="T:DW.WPFToolkit.Controls.PagingControl"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.PagingNavigateButton">
            <summary>
            Represents a button to step forward or backwards through the pages in the <see cref="T:DW.WPFToolkit.Controls.PagingControl"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.CornerResizer">
            <summary>
            Represents a element in the corners of the <see cref="T:DW.WPFToolkit.Controls.Resizer"/> to hold and drag in a specific direction.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.CornerResizer.DirectionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.CornerResizer.Direction"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.CornerResizer.PositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.CornerResizer.Position"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.CornerResizer.Direction">
            <summary>
            Gets or sets the direction where the corner resizer can be moved.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.CornerResizer.Position">
            <summary>
            Gets or sets the position of the corner resizer inside the <see cref="T:DW.WPFToolkit.Controls.Resizer"/> control.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.CornerResizerDirections">
            <summary>
            Represents the direction where the <see cref="T:DW.WPFToolkit.Controls.CornerResizer"/> in the <see cref="T:DW.WPFToolkit.Controls.Resizer"/> can be moved.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.CornerResizerDirections.NWtoSE">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.CornerResizer"/> can be moved from the north west to south east and back.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.CornerResizerDirections.NEtoSW">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.CornerResizer"/> can be moved from the north east to the south west and back.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.CornerResizerPositions">
            <summary>
            Defines where the <see cref="T:DW.WPFToolkit.Controls.CornerResizer"/> in the <see cref="T:DW.WPFToolkit.Controls.Resizer"/> is placed.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.CornerResizerPositions.NW">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.CornerResizer"/> is placed on the top left corner.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.CornerResizerPositions.NE">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.CornerResizer"/> is placed on the top right corner.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.CornerResizerPositions.SE">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.CornerResizer"/> is placed on the bottom right corner.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.CornerResizerPositions.SW">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.CornerResizer"/> is placed on the bottom left corner.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.FrameResizer">
            <summary>
            Represents a single line to drag in a specific direction. This is used in the <see cref="T:DW.WPFToolkit.Controls.Resizer"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.FrameResizer.DirectionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.FrameResizer.Direction"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.FrameResizer.PositionProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.FrameResizer.Position"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.FrameResizer.Direction">
            <summary>
            Gets or sets the direction where the frame resizer can be moved to.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.FrameResizer.Position">
            <summary>
            Gets or sets the position of the frame resizer inside the <see cref="T:DW.WPFToolkit.Controls.Resizer"/> control.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.FrameResizerDirections">
            <summary>
            Represents the direction where the <see cref="T:DW.WPFToolkit.Controls.FrameResizer"/> in the <see cref="T:DW.WPFToolkit.Controls.Resizer"/> can be moved.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.FrameResizerDirections.TopBottom">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.FrameResizer"/> can be moved from the top to the bottom and back.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.FrameResizerDirections.LeftRight">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.FrameResizer"/> can be moved from the left to the right and back.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.FrameResizerPositions">
            <summary>
            Defines where the <see cref="T:DW.WPFToolkit.Controls.FrameResizer"/> in the <see cref="T:DW.WPFToolkit.Controls.Resizer"/> is placed.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.FrameResizerPositions.Left">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.FrameResizer"/> is placed on the left side.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.FrameResizerPositions.Top">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.FrameResizer"/> is placed on the top.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.FrameResizerPositions.Right">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.FrameResizer"/> is placed on the right side.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.FrameResizerPositions.Bottom">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.FrameResizer"/> is placed on the bottom.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.Resizer">
            <summary>
            Brings the possibility to resize every UI control manually by hold and drag the corners or sides.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <WPFToolkit:Resizer FrameSizes="0,0,4,4">
                <Button Content="Resize Me" />
            </WPFToolkit:Resizer>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.Resizer.OnApplyTemplate">
            <summary>
            The template gets added to the control.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.Resizer.LeftWidthProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.Resizer.LeftWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.Resizer.TopHeightProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.Resizer.TopHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.Resizer.RightWidthProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.Resizer.RightWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.Resizer.BottomHeightProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.Resizer.BottomHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.Resizer.FrameSizesProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.Resizer.FrameSizes"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.Resizer.CornerSizeProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.Resizer.CornerSize"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.Resizer.LeftWidth">
            <summary>
            Gets or sets the width of the left frame resizer.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.Resizer.TopHeight">
            <summary>
            Gets or sets the height of the top frame resizer.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.Resizer.RightWidth">
            <summary>
            Gets or sets the width of the right frame resizer.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.Resizer.BottomHeight">
            <summary>
            Gets or sets the height of the bottom frame resizer.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.Resizer.FrameSizes">
            <summary>
            Gets or sets all frame resizer widths and heights. Left,Top,Right,Bottom.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.Resizer.CornerSize">
            <summary>
            Gets or sets the width and height of all corner resizers.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.SplitButton">
            <summary>
            Shows a button which can be clicked but also expanded to call commands from child elements.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <WPFToolkit:SplitButton Content="Main" Command="{Binding MainCommand}">
                <WPFToolkit:SplitButtonItem Content="Sub 1" Command="{Binding Sub1Command}" />
                <WPFToolkit:SplitButtonItem Content="Sub 2" Command="{Binding Sub2Command}" />
                <WPFToolkit:SplitButtonItem Content="Sub 3" Command="{Binding Sub3Command}" />
                <WPFToolkit:SplitButtonItem Content="Sub 4" Command="{Binding Sub4Command}" />
            </WPFToolkit:SplitButton>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.SplitButton.OnApplyTemplate">
            <summary>
            The template gets added to the control.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SplitButton.CommandProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SplitButton.Command"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SplitButton.CommandParameterProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SplitButton.CommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SplitButton.ClickEvent">
            <summary>
            Identifies the <see cref="E:DW.WPFToolkit.Controls.SplitButton.Click"/> routed event.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SplitButton.ContentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SplitButton.Content"/> dependency property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.SplitButton.GetContainerForItemOverride">
            <summary>
            Generates a new child item container to hold in the <see cref="T:DW.WPFToolkit.Controls.SplitButton"/>.
            </summary>
            <returns>The generated child item container</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.SplitButton.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Checks if the item is already the correct item container. If not the <see cref="M:DW.WPFToolkit.Controls.SplitButton.GetContainerForItemOverride"/> will be used to generate the right container.
            </summary>
            <param name="item">The item to shown in the <see cref="T:DW.WPFToolkit.Controls.SplitButton"/>.</param>
            <returns>True if the item is the correct item container already.</returns>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SplitButton.Command">
            <summary>
            Gets or sets the command to be called when the button itself is clicked.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SplitButton.CommandParameter">
            <summary>
            Gets or sets the parameter to be passed with the <see cref="P:DW.WPFToolkit.Controls.SplitButton.Command"/>.
            </summary>
        </member>
        <member name="E:DW.WPFToolkit.Controls.SplitButton.Click">
            <summary>
            Occurs when the main button is clicked.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SplitButton.Content">
            <summary>
            Gets or sets the main content of the button.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.SplitButtonItem">
            <summary>
            Represents a single entry in the drop down of the <see cref="T:DW.WPFToolkit.Controls.SplitButton"/>.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.SplitButtonItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.SplitButtonItem"/> class.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SplitButtonItem.CommandProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SplitButtonItem.Command"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SplitButtonItem.CommandParameterProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SplitButtonItem.CommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SplitButtonItem.ClickEvent">
            <summary>
            Identifies the <see cref="E:DW.WPFToolkit.Controls.SplitButtonItem.Click"/> routed event.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SplitButtonItem.Command">
            <summary>
            Gets or sets the command to be executed when the item get clicked.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SplitButtonItem.CommandParameter">
            <summary>
            Gets or sets the command parameter passed with the <see cref="P:DW.WPFToolkit.Controls.SplitButtonItem.Command"/>.
            </summary>
        </member>
        <member name="E:DW.WPFToolkit.Controls.SplitButtonItem.Click">
            <summary>
            Occurs when the element is clicked.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.SplitToggleButton">
            <summary>
            Represents the button on the side of the <see cref="T:DW.WPFToolkit.Controls.SplitButton"/> to expand or collapse the child items.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SplitToggleButton.OutherCornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SplitToggleButton.OutherCornerRadius"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SplitToggleButton.InnerCornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SplitToggleButton.InnerCornerRadius"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SplitToggleButton.OutherBorderThicknessProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SplitToggleButton.OutherBorderThickness"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.SplitToggleButton.InnerBorderThicknessProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.SplitToggleButton.InnerBorderThickness"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SplitToggleButton.OutherCornerRadius">
            <summary>
            Gets or sets the outher radius of the button in the template.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SplitToggleButton.InnerCornerRadius">
            <summary>
            Gets or sets the inner radius of the buttion in the template.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SplitToggleButton.OutherBorderThickness">
            <summary>
            Gets or sets the thickness of the other border in the template.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.SplitToggleButton.InnerBorderThickness">
            <summary>
            Gets or sets the thickness of the inner border in the template.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.TimeBox">
            <summary>
            Shows textboxes to let the user input a time.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <WPFToolkit:TimeBox HasUpDownButtons="True" TimeFormat="Long" Time="{Binding CurrentTime}" />
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.TimeBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.TimeBox"/> class.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TimeBox.TimeProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TimeBox.Time"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TimeBox.TimeFormatProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TimeBox.TimeFormat"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TimeBox.HasUpDownButtonsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TimeBox.HasUpDownButtons"/> dependency property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.TimeBox.OnApplyTemplate">
            <summary>
            The template gets added to the control.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TimeBox.Time">
            <summary>
            Gets or sets the time shown in the text box.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TimeBox.TimeFormat">
            <summary>
            Gets or sets the format of the time the user can edit.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TimeBox.HasUpDownButtons">
            <summary>
            Gets or sets a value that indicates if the time box has up down buttons or not.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.TimeFormat">
            <summary>
            Defines if the <see cref="T:DW.WPFToolkit.Controls.TimeBox"/> contains a seconds box or not.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TimeFormat.Long">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.TimeBox"/> contains hours, minutes and seconds.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TimeFormat.Short">
            <summary>
            The <see cref="T:DW.WPFToolkit.Controls.TimeBox"/> contains hours and minutes.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.TitledItem">
            <summary>
            Represents a single element with content and title in the <see cref="T:DW.WPFToolkit.Controls.TitledItemsControl"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TitledItem.TitleProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TitledItem.Title"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TitledItem.VerticalTitleAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TitledItem.VerticalTitleAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TitledItem.HorizontalTitleAlignmentProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TitledItem.HorizontalTitleAlignment"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TitledItem.TitleMarginProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TitledItem.TitleMargin"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TitledItem.ContentMarginProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TitledItem.ContentMargin"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TitledItem.Title">
            <summary>
            Gets or sets the title of the item shown on the left.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TitledItem.VerticalTitleAlignment">
            <summary>
            Gets or sets the vertical alignment of the title.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TitledItem.HorizontalTitleAlignment">
            <summary>
            Gets or sets the horizontal alignment of the title.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TitledItem.TitleMargin">
            <summary>
            Gets or sets the margin of the title.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TitledItem.ContentMargin">
            <summary>
            Gets or sets the margin of the content.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.TitledItemsControl">
            <summary>
            Shows items with its title allined to each other. This can be used for every kind of input masks.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <WPFToolkit:TitledItemsControl>
                <WPFToolkit:TitledItem Title="Name:">
                    <TextBox Text="{Binding Name}" />
                </WPFToolkit:TitledItem>
                <WPFToolkit:TitledItem Title="Age:">
                    <TextBox Text="{Binding Age}" />
                </WPFToolkit:TitledItem>
                <WPFToolkit:TitledItem Title="Sex:">
                    <TextBox Text="{Binding Sex}" />
                </WPFToolkit:TitledItem>
            </WPFToolkit:TitledItemsControl>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.TitledItemsControl.GetContainerForItemOverride">
            <summary>
            Generates a new child item container to hold in the <see cref="T:DW.WPFToolkit.Controls.DynamicTabControl"/>.
            </summary>
            <returns>The generated child item container</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.TitledItemsControl.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Checks if the item is already the correct item container. If not the <see cref="M:DW.WPFToolkit.Controls.TitledItemsControl.GetContainerForItemOverride"/> will be used to generate the right container.
            </summary>
            <param name="item">The item to shown in the <see cref="T:DW.WPFToolkit.Controls.TitledItemsControl"/>.</param>
            <returns>True if the item is the correct item container already.</returns>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TitledItemsControl.VerticalTitleAlignmentsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TitledItemsControl.VerticalTitleAlignments"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TitledItemsControl.HorizontalTitleAlignmentsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TitledItemsControl.HorizontalTitleAlignments"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TitledItemsControl.TitleMarginsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TitledItemsControl.TitleMargins"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TitledItemsControl.HorizontalContentAlignmentsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TitledItemsControl.HorizontalContentAlignments"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TitledItemsControl.VerticalContentAlignmentsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TitledItemsControl.VerticalContentAlignments"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TitledItemsControl.ContentMarginsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TitledItemsControl.ContentMargins"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TitledItemsControl.VerticalTitleAlignments">
            <summary>
            Gets or sets a value that defines the vertical alignment of all titles in the child elements.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TitledItemsControl.HorizontalTitleAlignments">
            <summary>
            Gets or sets a value that defines the horizontal alignment of all titles in the child elements.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TitledItemsControl.TitleMargins">
            <summary>
            Gets or sets a value that defines the margin of all titles in the child elements
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TitledItemsControl.HorizontalContentAlignments">
            <summary>
            Gets or sets a value that defines the horizontal alignments of all contens in the child elements.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TitledItemsControl.VerticalContentAlignments">
            <summary>
            Gets or sets a value that defines the vertical alignments of all contents in the child elements.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TitledItemsControl.ContentMargins">
            <summary>
            Gets or sets a value that defines the margins of all contents in the child elements.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.TreeComboBox">
            <summary>
            Represents a ComboBox which shows a tree view in the drop down.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <Toolkit:TreeComboBox ItemsSource="{Binding Customers}" SelectionBoxItem="{Binding SelectedCustomer}">
                <Toolkit:TreeComboBox.ItemContainerStyle>
                    <Style TargetType="{x:Type TreeViewItem}">
                        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    </Style>
                </Toolkit:TreeComboBox.ItemContainerStyle>
                <Toolkit:TreeComboBox.SelectionBoxItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{Binding Name}" />
                            <TextBlock Text="{Binding FamilyName}" Margin="5,0,0,0" />
                        </StackPanel>
                    </DataTemplate>
                </Toolkit:TreeComboBox.SelectionBoxItemTemplate>
                <Toolkit:TreeComboBox.ItemTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding Customers}">
                        <TextBlock Text="{Binding Name}" />
                    </HierarchicalDataTemplate>
                </Toolkit:TreeComboBox.ItemTemplate>
            </Toolkit:TreeComboBox>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.TreeComboBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.TreeComboBox"/> class.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.TreeComboBox.OnApplyTemplate">
            <summary>
            The template gets added to the control.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TreeComboBox.MaxDropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TreeComboBox.MaxDropDownHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TreeComboBox.SelectionBoxItemTemplateProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TreeComboBox.SelectionBoxItemTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TreeComboBox.SelectionBoxItemProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TreeComboBox.SelectionBoxItem"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TreeComboBox.SelectionBoxItemStringFormatProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TreeComboBox.SelectionBoxItemStringFormat"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TreeComboBox.IsDropDownOpenProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TreeComboBox.IsDropDownOpen"/> dependency property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.TreeComboBox.OnSelectedItemChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Sets the current selected item of the selection in the tree has been changed and closed the drop down.
            </summary>
            <param name="e">The parameter passed by the owner.</param>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TreeComboBox.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height of the drop down popup. This is taken from the calculated height of the original <see cref="P:System.Windows.Controls.ComboBox.MaxDropDownHeight"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TreeComboBox.SelectionBoxItemTemplate">
            <summary>
            Gets or sets data template of the selected item. This is taken from the original <see cref="P:System.Windows.Controls.ComboBox.SelectionBoxItemTemplate"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TreeComboBox.SelectionBoxItem">
            <summary>
            Gets or sets the item shown as selected.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TreeComboBox.SelectionBoxItemStringFormat">
            <summary>
            Gets or sets string format of the selected item. This is taken from the original <see cref="P:System.Windows.Controls.ComboBox.SelectionBoxItemStringFormat"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TreeComboBox.IsDropDownOpen">
            <summary>
            Gets or sets a value that indicates of the drop down is opened or not.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.TreeListView">
            <summary>
            Shows the <see cref="T:DW.WPFToolkit.Controls.EnhancedTreeView"/> with the possibity to expand or collapse child elements shown in a GridView. The expander can be placed in every column cell template.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <WPFToolkit:TreeListView ItemsSource="{Binding Customer}">
                <WPFToolkit:TreeListView.Resources>
                    <HierarchicalDataTemplate DataType="{x:Type Data:Customer}" ItemsSource="{Binding Customer}" />
                </WPFToolkit:TreeListView.Resources>
                <WPFToolkit:TreeListView.View>
                    <GridView>
                        <GridViewColumn Header="Name">
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <DockPanel>
                                        <WPFToolkit:TreeListViewExpander DockPanel.Dock="Left" />
                                        <TextBlock Text="{Binding Name}" Margin="5,0,0,0" />
                                    </DockPanel>
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                        <GridViewColumn Header="Family Name" DisplayMemberBinding="{Binding FamilyName}" />
                    </GridView>
                </WPFToolkit:TreeListView.View>
            </WPFToolkit:TreeListView>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Controls.TreeListView.GetContainerForItemOverride">
            <summary>
            Generates a new child item container to hold in the <see cref="T:DW.WPFToolkit.Controls.TreeListView"/>.
            </summary>
            <returns>The generated child item container</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.TreeListView.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Checks if the item is already the correct item container. If not the <see cref="M:DW.WPFToolkit.Controls.TreeListView.GetContainerForItemOverride"/> will be used to generate the right container.
            </summary>
            <param name="item">The item to shown in the <see cref="T:DW.WPFToolkit.Controls.TreeListView"/>.</param>
            <returns>True if the item is the correct item container already.</returns>
        </member>
        <member name="F:DW.WPFToolkit.Controls.TreeListView.ViewProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.TreeListView.View"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TreeListView.View">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.GridView"/> shown in the control.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.TreeListViewConverter">
            <summary>
            Adds an intending level of the items shown in the tree of the <see cref="T:DW.WPFToolkit.Controls.TreeListView"/>.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.TreeListViewConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Checks if the tree view item is a child item and can be collapsed and calculates the intending by the level.
            </summary>
            <param name="value">The tree view item container.</param>
            <param name="targetType">This parameter is not used.</param>
            <param name="parameter">This parameter is not used.</param>
            <param name="culture">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.TreeListViewConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">This parameter is not used.</param>
            <param name="targetType">This parameter is not used.</param>
            <param name="parameter">This parameter is not used.</param>
            <param name="culture">This parameter is not used.</param>
            <returns>nothing</returns>
            <exception cref="T:System.NotImplementedException">The convert back is not intended to be used.</exception>
        </member>
        <member name="T:DW.WPFToolkit.Controls.TreeListViewExpander">
            <summary>
            Represents the expander shown in the <see cref="T:DW.WPFToolkit.Controls.TreeListView"/> to show or collapse child elements.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.TreeListViewItem">
            <summary>
            Sepresents a single entry in the <see cref="T:DW.WPFToolkit.Controls.TreeListView"/>.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.TreeListViewItem.GetContainerForItemOverride">
            <summary>
            Generates a new child item container to hold in the <see cref="T:DW.WPFToolkit.Controls.TreeListViewItem"/>.
            </summary>
            <returns>The generated child item container</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.TreeListViewItem.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Checks if the item is already the correct item container. If not the <see cref="M:DW.WPFToolkit.Controls.TreeListViewItem.GetContainerForItemOverride"/> will be used to generate the right container.
            </summary>
            <param name="item">The item to shown in the <see cref="T:DW.WPFToolkit.Controls.TreeListViewItem"/>.</param>
            <returns>True if the item is the correct item container already.</returns>
        </member>
        <member name="P:DW.WPFToolkit.Controls.TreeListViewItem.Level">
            <summary>
            Returns the level of the current item in the tree.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.UniformWrapPanel">
            <summary>
            Enhances the <see cref="T:System.Windows.Controls.WrapPanel"/> by the feature that all items will have the same size.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <ItemsControl ItemsSource="{Binding Images}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WPFToolkit:UniformWrapPanel />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
            
            <WPFToolkit:UniformWrapPanel Orientation="Horizontal" MinItemWidth="100">
                <Button Content="One" />
                <Button Content="Two" />
                <Button Content="Three" />
            </WPFToolkit:UniformWrapPanel>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:DW.WPFToolkit.Controls.UniformWrapPanel.IsAutoUniformProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.UniformWrapPanel.IsAutoUniform"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.UniformWrapPanel.MinItemWidthProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.UniformWrapPanel.MinItemWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.UniformWrapPanel.MinItemHeightProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.UniformWrapPanel.MinItemHeight"/> dependency property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.UniformWrapPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Lets each child calculating is needed size.
            </summary>
            <param name="availableSize">The available space by the parent control.</param>
            <returns>The calculated size needed for the control.</returns>
        </member>
        <member name="P:DW.WPFToolkit.Controls.UniformWrapPanel.IsAutoUniform">
            <summary>
            Gets or sets a value that defines if the common height or width will be taken by the biggest child element.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.UniformWrapPanel.MinItemWidth">
            <summary>
            Gets or sets the minimum width of the items.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.UniformWrapPanel.MinItemHeight">
            <summary>
            Gets or sets the minimum height of the items.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.DefaultMessageCopyFormatter">
            <summary>
            Takes all data from the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBox"/> after user pressed Ctrl+C and copy its information to the clipboard.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.IMessageCopyFormatter">
            <summary>
            Represents the formatter to be used after pressing Ctrl+C with the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBox"/> open.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.IMessageCopyFormatter.Copy(System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage,DW.WPFToolkit.Controls.MessageBoxStrings)">
            <summary>
            Called to copy the WPFMessageBox content somewhere to.
            </summary>
            <param name="title">The WPFMessageBox title.</param>
            <param name="message">The message shown in the WPFMessageBox.</param>
            <param name="buttons">The buttons available in the WPFMessageBox.</param>
            <param name="icon">The icon shown in the WPFMessageBox.</param>
            <param name="strings">The strings used in the WPFMessageBox.</param>
        </member>
        <member name="M:DW.WPFToolkit.Controls.DefaultMessageCopyFormatter.Copy(System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage,DW.WPFToolkit.Controls.MessageBoxStrings)">
            <summary>
            Called to copy the WPFMessageBox content somewhere to.
            </summary>
            <param name="title">The WPFMessageBox title.</param>
            <param name="message">The message shown in the WPFMessageBox.</param>
            <param name="buttons">The buttons available in the WPFMessageBox.</param>
            <param name="icon">The icon shown in the WPFMessageBox.</param>
            <param name="strings">The strings used in the WPFMessageBox.</param>
        </member>
        <member name="T:DW.WPFToolkit.Controls.MessageBoxStrings">
            <summary>
            Provides messagebox element strings in the current system language.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.MessageBoxStrings.OK">
            <summary>
            Gets or sets the translation for 'OK'.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.MessageBoxStrings.Cancel">
            <summary>
            Gets or sets the translation for 'Cancel'.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.MessageBoxStrings.Abort">
            <summary>
            Gets or sets the translation for 'Abort'.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.MessageBoxStrings.Retry">
            <summary>
            Gets or sets the translation for 'Retry'.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.MessageBoxStrings.Ignore">
            <summary>
            Gets or sets the translation for 'Ignore'.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.MessageBoxStrings.Yes">
            <summary>
            Gets or sets the translation for 'Yes'.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.MessageBoxStrings.No">
            <summary>
            Gets or sets the translation for 'No'.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.MessageBoxStrings.Help">
            <summary>
            Gets or sets the translation for 'Help'.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.MessageBoxStrings.TryAgain">
            <summary>
            Gets or sets the translation for 'Try Again'.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.MessageBoxStrings.Continue">
            <summary>
            Gets or sets the translation for 'Continue'.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.MessageBoxStrings.YesToAll">
            <summary>
            Gets or sets the translation for 'Yes To All'.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.MessageBoxStrings.NoToAll">
            <summary>
            Gets or sets the translation for 'No To All'.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.MessageBoxStrings.DoNotShowAgain">
            <summary>
            Gets or sets the translation for 'Do Not Show Again'.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.MessageBoxStrings.OpenDetails">
            <summary>
            Gets or sets the translation for 'Open Details'.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.MessageBoxStrings.CloseDetails">
            <summary>
            Gets or sets the translation for 'Close Details'.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.WPFMessageBox">
            <summary>
            Show a WPF window as a messagebox which is full configurable.
            </summary>
            <example>
            <code lang="csharp">
            <![CDATA[
            public void Show1()
            {
                WPFMessageBox.Show("Messagebox Text");
            }
            
            public void Show2()
            {
                WPFMessageBox.Show("Messagebox Text", "Caption");
            }
            
            public void Show3()
            {
                WPFMessageBox.Show("Messagebox Text", "Caption", WPFMessageBoxButtons.AbortRetryIgnore);
            }
            
            public void Show4()
            {
                var options = new WPFMessageBoxOptions();
                options.DetailsContent = new Label();
                options.ShowDetails = true;
                options.ShowHelpButton = true;
                options.Strings.Abort = "Go Away";
                options.WindowOptions.DetailedResizeMode = ResizeMode.CanResizeWithGrip;
            
                WPFMessageBox.Show("Messagebox Text",
                                   "Caption",
                                   WPFMessageBoxButtons.AbortRetryIgnore,
                                   WPFMessageBoxImage.Error,
                                   WPFMessageBoxResult.Retry, options);
            }
            ]]>
            </code>
            </example>
            <summary>
            WPFMessageBox
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.OnSourceInitialized(System.EventArgs)">
            <summary>
            Raises the System.Windows.Window.SourceInitialized event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.OnContentRendered(System.EventArgs)">
            <summary>
            Raises the System.Windows.Window.ContentRendered event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the System.Windows.Window.Closing event.
            </summary>
            <param name="e">A System.ComponentModel.CancelEventArgs that contains the event data.</param>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.Input.Keyboard.PreviewKeyDown attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The System.Windows.Input.KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.Show(System.String)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <returns>A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.Show(System.String,System.String)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <returns>A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.Show(System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="buttons">A DW.WPFToolkit.Controls.WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <returns>A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.Show(System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="buttons">A DW.WPFToolkit.Controls.WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A DW.WPFToolkit.Controls.WPFMessageBoxImage value that specifies the icon to display.</param>
            <returns>A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.Show(System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage,DW.WPFToolkit.Controls.WPFMessageBoxResult)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="buttons">A DW.WPFToolkit.Controls.WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A DW.WPFToolkit.Controls.WPFMessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultButton">A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies the default result of the message box.</param>
            <returns>A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.Show(System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage,DW.WPFToolkit.Controls.WPFMessageBoxResult,DW.WPFToolkit.Controls.WPFMessageBoxOptions)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="buttons">A DW.WPFToolkit.Controls.WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A DW.WPFToolkit.Controls.WPFMessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultButton">A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies the default result of the message box.</param>
            <param name="options">A DW.WPFToolkit.Controls.WPFMessageBoxOptions value object that specifies the options.</param>
            <returns>A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.Show(System.Windows.Window,System.String)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="owner">A System.Windows.Window that represents the owner window of the message box.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <returns>A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.Show(System.Windows.Window,System.String,System.String)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="owner">A System.Windows.Window that represents the owner window of the message box.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <returns>A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.Show(System.Windows.Window,System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="owner">A System.Windows.Window that represents the owner window of the message box.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="buttons">A DW.WPFToolkit.Controls.WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <returns>A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.Show(System.Windows.Window,System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="owner">A System.Windows.Window that represents the owner window of the message box.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="buttons">A DW.WPFToolkit.Controls.WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A DW.WPFToolkit.Controls.WPFMessageBoxImage value that specifies the icon to display.</param>
            <returns>A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.Show(System.Windows.Window,System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage,DW.WPFToolkit.Controls.WPFMessageBoxResult)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="owner">A System.Windows.Window that represents the owner window of the message box.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="buttons">A DW.WPFToolkit.Controls.WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A DW.WPFToolkit.Controls.WPFMessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultButton">A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies the default result of the message box.</param>
            <returns>A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.Show(System.Windows.Window,System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage,DW.WPFToolkit.Controls.WPFMessageBoxResult,DW.WPFToolkit.Controls.WPFMessageBoxOptions)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="owner">A System.Windows.Window that represents the owner window of the message box.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="buttons">A DW.WPFToolkit.Controls.WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A DW.WPFToolkit.Controls.WPFMessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultButton">A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies the default result of the message box.</param>
            <param name="options">A DW.WPFToolkit.Controls.WPFMessageBoxOptions value object that specifies the options.</param>
            <returns>A DW.WPFToolkit.Controls.WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBox.IsDetailsExpanded">
            <summary>
            Gets or sets a value which indicates of the details are shown or not
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBox.Message">
            <summary>
            Gets or sets the message to be show.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBox.Image">
            <summary>
            Gets or sets the icon to show.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBox.Buttons">
            <summary>
            Gets or sets which buttons has to be shown.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBox.DefaultButton">
            <summary>
            Gets or sets which button is the default button after showing the WPFMessageBox.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBox.Result">
            <summary>
            Gets or sets the result how the user closed the WPFMessageBox.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBox.Options">
            <summary>
            Gets or sets the additional WPFMessageBox options.
            </summary>
        </member>
        <member name="E:DW.WPFToolkit.Controls.WPFMessageBox.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.WPFMessageBoxButtonControl">
            <summary>
            Represents a button used in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBox"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel">
            <summary>
            Represents the buttons panel hosted in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBox"/>.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.OnApplyTemplate">
            <summary>
            The template gets added to the control.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ResultProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.Result"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ButtonsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.Buttons"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.DefaultButtonProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.DefaultButton"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.StringsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.Strings"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ShowHelpButtonProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ShowHelpButton"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ShowYesToAllButtonProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ShowYesToAllButton"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ShowNoToAllButtonProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ShowNoToAllButton"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ShowDoNotShowAgainCheckBoxProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ShowDoNotShowAgainCheckBox"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.IsDoNotShowAgainCheckedProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.IsDoNotShowAgainChecked"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ShowDetailsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ShowDetails"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.CustomItemProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.CustomItem"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ClickEvent">
            <summary>
            Identifies the <see cref="E:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.Click"/> routed event.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.HelpRequestEvent">
            <summary>
            Identifies the <see cref="E:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.HelpRequest"/> routed event.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ExpandDetailsEvent">
            <summary>
            Identifies the <see cref="E:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ExpandDetails"/> routed event.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.Result">
            <summary>
            Gets or sets the result how the user closed the WPFMessageBox.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.Buttons">
            <summary>
            Gets or sets which buttons has to be shown.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.DefaultButton">
            <summary>
            Gets or sets which button is the default button after showing the WPFMessageBox.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.Strings">
            <summary>
            Gets or sets all strings to be used in the WPFMessageBox buttons.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ShowHelpButton">
            <summary>
            Gets or sets a value which indicates if the WPFMessageBox has a help button or not.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ShowYesToAllButton">
            <summary>
            Gets or sets a value which indicates if the WPFMessageBox has a 'Yes To All' button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ShowNoToAllButton">
            <summary>
            Gets or sets a value which indicates if the WPFMessageBox has a 'No To All' button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ShowDoNotShowAgainCheckBox">
            <summary>
            Gets or sets a value which indicates if the WPFMessageBox has a 'Do Not Show Again' checkbox.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.IsDoNotShowAgainChecked">
            <summary>
            Gets or sets a value which indicates if the 'Do Not Show Again' is checked on start and the check state after close the WPFMessageBox.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ShowDetails">
            <summary>
            Gets or sets a value which indicates if the WPFMessageBox has a details button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.CustomItem">
            <summary>
            Gets or sets a additional control which gets shown beween the details and normal buttons.
            </summary>
        </member>
        <member name="E:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.Click">
            <summary>
            Occurs when a button got clicked.
            </summary>
        </member>
        <member name="E:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.HelpRequest">
            <summary>
            Occurs when the help button got clicked.
            </summary>
        </member>
        <member name="E:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel.ExpandDetails">
            <summary>
            Occurs when the details button got clicked.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.WPFMessageBoxCheckBoxControl">
            <summary>
            Represents the CheckBox used in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBox"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.WPFMessageBoxDetailsButtonControl">
            <summary>
            Represents the details button shown in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBox"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxDetailsButtonControl.CollapsedHeaderTextProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxDetailsButtonControl.CollapsedHeaderText"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxDetailsButtonControl.ExpandedHeaderTextProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxDetailsButtonControl.ExpandedHeaderText"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxDetailsButtonControl.CollapsedHeaderText">
            <summary>
            Gets or sets the text to show on the button if the details are not shown.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxDetailsButtonControl.ExpandedHeaderText">
            <summary>
            Gets or sets the text to show on the button if the details are shown.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.WPFMessageBoxDetailsPresenter">
            <summary>
            Holds the details content shown if details in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBox"/> are expanded.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxDetailsPresenter.IsDetailsExpandedProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxDetailsPresenter.IsDetailsExpanded"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxDetailsPresenter.IsDetailsExpanded">
            <summary>
            Gets or sets a value which indicates if the details are visible or not.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.WPFMessageBoxButtons">
            <summary>
            Defines which buttons to show in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBox"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtons.OK">
            <summary>
            The WPFMessageBox has just the OK button.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtons.OKCancel">
            <summary>
            The WPFMessageBox has the OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtons.AbortRetryIgnore">
            <summary>
            The WPFMessageBox has the Abort, Retry and Ignore buttons.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtons.YesNoCancel">
            <summary>
            The WPFMessageBox has the Yes, No and Cancel buttons.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtons.YesNo">
            <summary>
            The WPFMessageBox has the Yes and No buttons.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtons.RetryCancel">
            <summary>
            The WPFMessageBox has the Retry and Cancel buttons.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxButtons.CancelTryAgainContinue">
            <summary>
            The WPFMessageBox has the Cancel, Try Again and Continue buttons.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.WPFMessageBoxResult">
            <summary>
            Represents the result of the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBox"/> and its default button after calling show.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxResult.None">
            <summary>
            The WPFMessageBox has been closed without a result and has no default button.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxResult.OK">
            <summary>
            The WPFMessageBox has been closed by the OK button and the OK button is the default button.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxResult.Cancel">
            <summary>
            The WPFMessageBox has been closed by the Cancel button and the Cancel button is the default button.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxResult.Abort">
            <summary>
            The WPFMessageBox has been closed by the Abort button and the Abort button is the default button.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxResult.Retry">
            <summary>
            The WPFMessageBox has been closed by the Retry button and the Retry button is the default button.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxResult.Ignore">
            <summary>
            The WPFMessageBox has been closed by the Ignore button and the Ignore button is the default button.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxResult.Yes">
            <summary>
            The WPFMessageBox has been closed by the Yes button and the Yes button is the default button.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxResult.No">
            <summary>
            The WPFMessageBox has been closed by the No button and the No button is the default button.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxResult.Continue">
            <summary>
            The WPFMessageBox has been closed by the Continue button and the Continue button is the default button.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxResult.YesToAll">
            <summary>
            The WPFMessageBox has been closed by the YesToAll button and the YesToAll button is the default button.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxResult.NoToAll">
            <summary>
            The WPFMessageBox has been closed by the NoToAll button and the NoToAll button is the default button.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.WPFMessageBoxImage">
            <summary>
            Defines which icon to show in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBox"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxImage.None">
            <summary>
            The WPFMessageBox has no icon.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxImage.Error">
            <summary>
            The WPFMessageBox has the Error icon.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxImage.Hand">
            <summary>
            The WPFMessageBox has the Hand icon.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxImage.Stop">
            <summary>
            The WPFMessageBox has the Stop icon.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxImage.Question">
            <summary>
            The WPFMessageBox has the Question icon.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxImage.Exclamation">
            <summary>
            The WPFMessageBox has the Exclamation icon.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxImage.Warning">
            <summary>
            The WPFMessageBox has the Warning icon.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxImage.Information">
            <summary>
            The WPFMessageBox has the Information icon.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxImage.Asterisk">
            <summary>
            The WPFMessageBox has the Asterisk icon.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.WPFMessageBoxImageControl">
            <summary>
            Represents the icon shown in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBox"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxImageControl.ImageProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxImageControl.Image"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Controls.WPFMessageBoxImageControl.BitmapSourceProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Controls.WPFMessageBoxImageControl.BitmapSource"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxImageControl.Image">
            <summary>
            Gets or sets the image to be shown.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxImageControl.BitmapSource">
            <summary>
            Gets or sets the BitmapSource which represents the image to show.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.WPFMessageBoxOptions">
            <summary>
            Hols all available additional <see cref="T:DW.WPFToolkit.Controls.WPFMessageBox"/> options.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Controls.WPFMessageBoxOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBoxOptions"/> class.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.MessageCopyFormatter">
            <summary>
            Gets or sets the message copy formatter to be called if the user pressed Ctrö+C with the Box open.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.Strings">
            <summary>
            Gets or sets all strings to be used in the WPFMessageBox buttons.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.ShowHelpButton">
            <summary>
            Gets or sets a value which indicates if the WPFMessageBox has a help button or not.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.HelpRequestCallback">
            <summary>
            Gets or sets the callback to be invoked after pressing the Help button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.ShowYesToAllButton">
            <summary>
            Gets or sets a value which indicates if the WPFMessageBox has a 'Yes To All' button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.ShowNoToAllButton">
            <summary>
            Gets or sets a value which indicates if the WPFMessageBox has a 'No To All' button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.ShowDetails">
            <summary>
            Gets or sets a value which indicates if the WPFMessageBox has a details button.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.ShowDoNotShowAgainCheckBox">
            <summary>
            Gets or sets a value which indicates if the WPFMessageBox has a 'Do Not Show Again' checkbox.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.IsDoNotShowAgainChecked">
            <summary>
            Gets or sets a value which indicates if the 'Do Not Show Again' is checked on start and the check state after close the WPFMessageBox.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.DetailsContent">
            <summary>
            Gets or sets the content to be shown in the details area.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.CustomItem">
            <summary>
            Gets or sets a additional control which gets shown beween the details and normal buttons.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.BackgroundControl">
            <summary>
            Gets or sets a control which is in the background of the main area of the WPFMessageBox.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptions">
            <summary>
            Holds all properties wich affectes the WPFMessageBox window itself.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.Styles">
            <summary>
            Holds all properties for styling all UI elements.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer">
            <summary>
            Holds all properties for styling all UI elements.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer.ShowSystemMenu">
            <summary>
            Gets or sets a value which indicates of the window has a system menu and icon.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer.Icon">
            <summary>
            Gets or sets the icon to be used.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer.StartupLocation">
            <summary>
            Gets or sets the startup location of the window.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer.ShowInTaskbar">
            <summary>
            Gets or sets a value which indicates if the window is shown in the task bar.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer.ResizeMode">
            <summary>
            Gets or sets a value which indicates if and how the window can be resized if the details are closed.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer.Position">
            <summary>
            Gets or sets the position of the WPFMessageBox.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer.MinWidth">
            <summary>
            Gets or sets the minimum width of the WPFMessageBox if details are closed.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer.MaxWidth">
            <summary>
            Gets or sets the maximum width of the WPFMessageBox if details are closed.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer.MinHeight">
            <summary>
            Gets or sets the minimum height of the WPFMessageBox if details are closed.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer.MaxHeight">
            <summary>
            Gets or sets the maximum height of the WPFMessageBox if details are closed.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer.DetailedMinWidth">
            <summary>
            Gets or sets the minimum width of the WPFMessageBox if details are open.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer.DetailedMaxWidth">
            <summary>
            Gets or sets the maximum width of the WPFMessageBox if details are open.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer.DetailedMinHeight">
            <summary>
            Gets or sets the minimum height of the WPFMessageBox if details are open.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer.DetailedMaxHeight">
            <summary>
            Gets or sets the maximum height of the WPFMessageBox if details are open.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.WindowOptionsContainer.DetailedResizeMode">
            <summary>
            Gets or sets a value which indicates if and how the window can be resized if the details are open.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.WPFMessageBoxOptions.StylesContainer">
            <summary>
            Holds all properties for styling all UI elements.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.StylesContainer.ImageControlStyle">
            <summary>
            Gets or sets the style to be used in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBoxImageControl"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.StylesContainer.ScrollViewerControlStyle">
            <summary>
            Gets or sets the style to be used in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBoxScrollViewerControl"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.StylesContainer.TextControlStyle">
            <summary>
            Gets or sets the style to be used in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBoxTextControl"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.StylesContainer.ButtonsPanelStyle">
            <summary>
            Gets or sets the style to be used in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBoxButtonsPanel"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.StylesContainer.ButtonControlStyle">
            <summary>
            Gets or sets the style to be used in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBoxButtonControl"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.StylesContainer.CheckBoxControlStyle">
            <summary>
            Gets or sets the style to be used in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBoxCheckBoxControl"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.StylesContainer.DetailsButtonControlStyle">
            <summary>
            Gets or sets the style to be used in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBoxDetailsButtonControl"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Controls.WPFMessageBoxOptions.StylesContainer.DetailsPresenterStyle">
            <summary>
            Gets or sets the style to be used in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBoxDetailsPresenter"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.WPFMessageBoxScrollViewerControl">
            <summary>
            Represents the ScrollViewer used in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBox"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Controls.WPFMessageBoxTextControl">
            <summary>
            Represents the text block used in the <see cref="T:DW.WPFToolkit.Controls.WPFMessageBox"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Converters.BooleanToVisibilityInvertedConverter">
            <summary>
            Represents the converter that converts Boolean values to and from System.Windows.Visibility enumeration values like the <see cref="T:System.Windows.Controls.BooleanToVisibilityConverter"/> but in the opposite way.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <StackPanel>
                <StackPanel.Resources>
                    <Converters:BooleanToVisibilityInvertedConverter x:Key="BooleanToVisibilityInvertedConverter" />
                </StackPanel.Resources>
            
                <CheckBox Content="Hide" x:Name="HideCheckBox" />
                
                <Label Content="Text" Visibility="{Binding IsChecked, ElementName=HideCheckBox, Converter={StaticResource BooleanToVisibilityInvertedConverter}}" />
                
            </StackPanel>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Converters.BooleanToVisibilityInvertedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a Boolean value to a <see cref="T:System.Windows.Visibility"/> enumeration value.
            </summary>
            <param name="value">The Boolean value to convert. This value can be a standard Boolean value or a nullable Boolean value.</param>
            <param name="targetType">This parameter is not used.</param>
            <param name="parameter">This parameter is not used.</param>
            <param name="culture">This parameter is not used.</param>
            <returns><see cref="F:System.Windows.Visibility.Collapsed"/> if value is true; otherwise, <see cref="F:System.Windows.Visibility.Visible"/>.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Converters.BooleanToVisibilityInvertedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <see cref="T:System.Windows.Visibility"/> enumeration value to a Boolean value.
            </summary>
            <param name="value">A <see cref="T:System.Windows.Visibility"/> enumeration value.</param>
            <param name="targetType">This parameter is not used.</param>
            <param name="parameter">This parameter is not used.</param>
            <param name="culture">This parameter is not used.</param>
            <returns>true if value is <see cref="F:System.Windows.Visibility.Collapsed"/>; otherwise, false.</returns>
        </member>
        <member name="T:DW.WPFToolkit.Converters.InverseBooleanConverter">
            <summary>
            Represents the converter that converts Boolean values to its opposite.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <StackPanel>
                <StackPanel.Resources>
                    <Converters:InverseBooleanConverter x:Key="InverseBooleanConverter" />
                </StackPanel.Resources>
            
                <CheckBox Content="Disable" x:Name="DisableCheckBox" />
                
                <Label Content="Text" IsEnabled="{Binding IsChecked, ElementName=DisableCheckBox, Converter={StaticResource InverseBooleanConverter}}" />
                
            </StackPanel>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Converters.InverseBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts Boolean values to its opposite.
            </summary>
            <param name="value">The Boolean value to convert. This value can be a standard Boolean value or a nullable Boolean value.</param>
            <param name="targetType">This parameter is not used.</param>
            <param name="parameter">This parameter is not used.</param>
            <param name="culture">This parameter is not used.</param>
            <returns>true if the parameter is false; otherwise false. In case of null its false.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Converters.InverseBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts Boolean values to its opposite.
            </summary>
            <param name="value">The Boolean value to convert.</param>
            <param name="targetType">This parameter is not used.</param>
            <param name="parameter">This parameter is not used.</param>
            <param name="culture">This parameter is not used.</param>
            <returns>false if value is true; otherwise, true.</returns>
        </member>
        <member name="T:DW.WPFToolkit.Converters.NullToBooleanConverter">
            <summary>
            Represents the converter that converts the state if the parameter is null to a boolean value depending on the parameter.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <StackPanel>
                <StackPanel.Resources>
                    <Converters:NullToBooleanConverter x:Key="NullToBooleanConverter" />
                </StackPanel.Resources>
            
                <Label Content="Element Is There" IsEnabled="{Binding Element, Converter={StaticResource NullToBooleanConverter}, ConverterParameter={x:Static Converters:NullToBooleanDirection.NullIsFalse}}" />
                
            </StackPanel>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Converters.NullToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the null state of an object to a boolean representation depending on the parameter.
            </summary>
            <param name="value">The object to check for null.</param>
            <param name="targetType">This parameter is not used.</param>
            <param name="parameter">The <see cref="T:DW.WPFToolkit.Converters.NullToBooleanDirection"/> which defines what to return.</param>
            <param name="culture">This parameter is not used.</param>
            <returns>True if the value is not null; otherwise false. With the <see cref="F:DW.WPFToolkit.Converters.NullToBooleanDirection.NullIsTrue"/> its opposite.</returns>
            <remarks>The default of the <see cref="T:DW.WPFToolkit.Converters.NullToBooleanDirection"/> is <see cref="F:DW.WPFToolkit.Converters.NullToBooleanDirection.NullIsFalse"/>.</remarks>
        </member>
        <member name="M:DW.WPFToolkit.Converters.NullToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">This parameter is not used.</param>
            <param name="targetType">This parameter is not used.</param>
            <param name="parameter">This parameter is not used.</param>
            <param name="culture">This parameter is not used.</param>
            <returns>nothing</returns>
            <exception cref="T:System.NotImplementedException">The convert back is not intended to be used.</exception>
        </member>
        <member name="T:DW.WPFToolkit.Converters.NullToBooleanDirection">
            <summary>
            Defines if the NullToBooleanConverter returns true or false if the value is null.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Converters.NullToBooleanDirection.NullIsTrue">
            <summary>
            If the value is null the Convert has to return true; otherwise false.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Converters.NullToBooleanDirection.NullIsFalse">
            <summary>
            If the value is null the Convert has to return false; otherwise true.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Converters.NullToVisibilityConverter">
            <summary>
            Represents the converter that converts the state if the parameter is null to a Visibility value depending on the parameter.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <StackPanel>
                <StackPanel.Resources>
                    <Converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
                </StackPanel.Resources>
            
                <Label Content="Element Is There" Visibility="{Binding Element, Converter={StaticResource NullToVisibilityConverter}, ConverterParameter={x:Static Converters:NullToVisibilityDirection.NullIsCollapsed}}" />
                
            </StackPanel>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Converters.NullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the null state of an object to a Visibility representation depending on the parameter.
            </summary>
            <param name="value">The object to check for null.</param>
            <param name="targetType">This parameter is not used.</param>
            <param name="parameter">The <see cref="T:DW.WPFToolkit.Converters.NullToVisibilityDirection"/> which defines what to return.</param>
            <param name="culture">This parameter is not used.</param>
            <returns>Visibility. if the value is not null; otherwise Visibility.Visible. With the <see cref="F:DW.WPFToolkit.Converters.NullToVisibilityDirection.NullIsVisible"/> its opposite.</returns>
            <remarks>The default of the <see cref="T:DW.WPFToolkit.Converters.NullToVisibilityDirection"/> is <see cref="F:DW.WPFToolkit.Converters.NullToVisibilityDirection.NullIsCollapsed"/>.</remarks>
        </member>
        <member name="M:DW.WPFToolkit.Converters.NullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">This parameter is not used.</param>
            <param name="targetType">This parameter is not used.</param>
            <param name="parameter">This parameter is not used.</param>
            <param name="culture">This parameter is not used.</param>
            <returns>nothing</returns>
            <exception cref="T:System.NotImplementedException">The convert back is not intended to be used.</exception>
        </member>
        <member name="T:DW.WPFToolkit.Converters.NullToVisibilityDirection">
            <summary>
            Defines if the NullToVisibilityConverter returns Visibility.Visible, Visibility.Collapsed or Visibility.Hidden if the value is null.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Converters.NullToVisibilityDirection.NullIsVisible">
            <summary>
            If the value is null the Convert has to return Visibility.Visible; otherwise Visibility.Collapsed.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Converters.NullToVisibilityDirection.NullIsCollapsed">
            <summary>
            If the value is null the Convert has to return Visibility.Collapsed; otherwise Visibility.Visible.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Converters.NullToVisibilityDirection.NullIsHidden">
            <summary>
            If the value is null the Convert has to return Visibility.Hidden; otherwise Visibility.Visible.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.BindingAdapter">
            <summary>
            Brings the possibility to modify existing bindings wo be able to bind the parameters in the Binding like Converter, ConverterParameter and so on.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <TextBlock Text="{Binding Demo}" ToolTip="{Binding AnyTag}">
                <Helpers:BindingAdapter.BindingExtensions>
                    <Helpers:BindingExtensionCollection>
                        <Helpers:BindingExtension Property="TextBlock.Text"
                                                  Converter="{Binding DemoConverter}"
                                                  ConverterParameter="{Binding DemoConverterParameter}" />
                        <Helpers:BindingExtension Property="TextBlock.ToolTip"
                                                  FallbackValue="{Binding BindingFallbackValue}" />
                    </Helpers:BindingExtensionCollection>
                </Helpers:BindingAdapter.BindingExtensions>
            </TextBlock>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.BindingAdapter.GetBindingExtensions(System.Windows.DependencyObject)">
            <summary>
            Gets the extension collection which modifies a binding.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Helpers.BindingAdapter.BindingExtensions property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.BindingAdapter.SetBindingExtensions(System.Windows.DependencyObject,DW.WPFToolkit.Helpers.BindingExtensionCollection)">
            <summary>
            Sets the extensions collection which modifies a binding.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Helpers.BindingAdapter.BindingExtensions value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingAdapter.BindingExtensionsProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Helpers.BindingAdapter.GetBindingExtensions(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Helpers.BindingAdapter.SetBindingExtensions(System.Windows.DependencyObject,DW.WPFToolkit.Helpers.BindingExtensionCollection)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.BindingAdapter.GetBindingExtension(System.Windows.DependencyObject)">
            <summary>
            Gets the binding extension which modifies a binding.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Helpers.BindingAdapter.BindingExtension property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.BindingAdapter.SetBindingExtension(System.Windows.DependencyObject,DW.WPFToolkit.Helpers.BindingExtension)">
            <summary>
            Sets the binding extension which modifies a binding.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Helpers.BindingAdapter.BindingExtension value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingAdapter.BindingExtensionProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Helpers.BindingAdapter.GetBindingExtension(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Helpers.BindingAdapter.SetBindingExtension(System.Windows.DependencyObject,DW.WPFToolkit.Helpers.BindingExtension)"/> attached property.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.BindingExtension">
            <summary>
            Brings the possibility to modify existing bindings. See <see cref="T:DW.WPFToolkit.Helpers.BindingAdapter"/>.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <TextBlock Text="{Binding Demo}" ToolTip="{Binding AnyTag}">
                <Helpers:BindingAdapter.BindingExtensions>
                    <Helpers:BindingExtensionCollection>
                        <Helpers:BindingExtension Property="TextBlock.Text"
                                                  Converter="{Binding DemoConverter}"
                                                  ConverterParameter="{Binding DemoConverterParameter}" />
                        <Helpers:BindingExtension Property="TextBlock.ToolTip"
                                                  FallbackValue="{Binding BindingFallbackValue}" />
                    </Helpers:BindingExtensionCollection>
                </Helpers:BindingAdapter.BindingExtensions>
            </TextBlock>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.BindingExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Helpers.BindingExtension"/> class.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.PropertyProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.Property"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.UpdateSourceTriggerProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.UpdateSourceTrigger"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.ValidatesOnDataErrorsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.ValidatesOnDataErrors"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.ModeProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.Mode"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.PathProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.Path"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.AsyncStateProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.AsyncState"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.BindingGroupNameProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.BindingGroupName"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.BindsDirectlyToSourceProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.BindsDirectlyToSource"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.ConverterProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.Converter"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.ConverterCultureProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.ConverterCulture"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.ConverterParameterProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.ConverterParameter"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.ElementNameProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.ElementName"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.FallbackValueProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.FallbackValue"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.IsAsyncProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.IsAsync"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.NotifyOnSourceUpdatedProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.NotifyOnSourceUpdated"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.NotifyOnTargetUpdatedProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.NotifyOnTargetUpdated"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.NotifyOnValidationErrorProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.NotifyOnValidationError"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.StringFormatProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.StringFormat"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.TargetNullValueProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.TargetNullValue"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.UpdateSourceExceptionFilterProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.UpdateSourceExceptionFilter"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.ValidatesOnExceptionsProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.ValidatesOnExceptions"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.BindingExtension.XPathProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.BindingExtension.XPath"/> dependency property.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.Property">
            <summary>
            Gets or sets the property which binding have to be modified.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.UpdateSourceTrigger">
            <summary>
            Gets or sets the UpdateSourceTrigger in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.ValidatesOnDataErrors">
            <summary>
            Gets or sets the ValidatesOnDataErrors in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.Mode">
            <summary>
            Gets or sets the Mode in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.Path">
            <summary>
            Gets or sets the Path in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.AsyncState">
            <summary>
            Gets or sets the AsyncState in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.BindingGroupName">
            <summary>
            Gets or sets the BindingGroupName in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.BindsDirectlyToSource">
            <summary>
            Gets or sets the BindsDirectlyToSource in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.Converter">
            <summary>
            Gets or sets the Converter in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.ConverterCulture">
            <summary>
            Gets or sets the ConverterCulture in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.ConverterParameter">
            <summary>
            Gets or sets the ConverterParameter in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.ElementName">
            <summary>
            Gets or sets the ElementName in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.FallbackValue">
            <summary>
            Gets or sets the FallbackValue in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.IsAsync">
            <summary>
            Gets or sets the IsAsync in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.NotifyOnSourceUpdated">
            <summary>
            Gets or sets the NotifyOnSourceUpdated in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.NotifyOnTargetUpdated">
            <summary>
            Gets or sets the NotifyOnTargetUpdated in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.NotifyOnValidationError">
            <summary>
            Gets or sets the NotifyOnValidationError in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.StringFormat">
            <summary>
            Gets or sets the StringFormat in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.TargetNullValue">
            <summary>
            Gets or sets the TargetNullValue in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.UpdateSourceExceptionFilter">
            <summary>
            Gets or sets the UpdateSourceExceptionFilter in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.ValidatesOnExceptions">
            <summary>
            Gets or sets the ValidatesOnExceptions in the modified binding.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.BindingExtension.XPath">
            <summary>
            Gets or sets the XPath in the modified binding.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.BindingExtensionCollection">
            <summary>
            Represents a collection of <see cref="T:DW.WPFToolkit.Helpers.BindingExtension"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.ControlFocus">
            <summary>
            This object gives you the quick and easy possibility to move the current focus to a specific element.
            </summary>
            <example>
            <code lang="csharp">
            <![CDATA[
            ControlFocus.GiveFocus(myButton);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.ControlFocus.GiveFocus(System.Windows.UIElement)">
            <summary>
            Gives the focus to the given UIElement.
            </summary>
            <param name="element">The UIElement which has to get the focus.</param>
            <remarks>Giving the focus will be done using the target element dispatcher with the <see cref="F:System.Windows.Threading.DispatcherPriority.Render"/> priority.</remarks>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.ControlFocus.GiveFocus(System.Windows.UIElement,System.Action)">
            <summary>
            Gives the focus to the given UIElement with a Callback.
            </summary>
            <param name="element">The UIElement which has to get the focus.</param>
            <param name="actionOnFocus">The callback which will be called when the control got the focus. It will called just before the element.Focus will called and the KeyboardFocus will be set.</param>
            <remarks>Giving the focus will be done using the target element dispatcher with the <see cref="F:System.Windows.Threading.DispatcherPriority.Render"/> priority.</remarks>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.EventToCommandAdapter">
            <summary>
            Brings the possibility to append one or more EventToCommand behaviors onto a control.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <StackPanel>
                <Button Content="Demo Single">
                    <Helpers:EventToCommandAdapter.EventToCommand>
                        <Helpers:EventToCommand Event="MouseLeave" Command="{Binding MouseLeaveCommand}" />
                    </Helpers:EventToCommandAdapter.EventToCommand>
                </Button>
                
                <Button Content="Demo Multiple">
                    <Helpers:EventToCommandAdapter.EventsToCommands>
                        <Helpers:EventToCommandCollection>
                            <Helpers:EventToCommand Event="Click" Command="{Binding ClickCommand}" />
                            <Helpers:EventToCommand Event="MouseEnter" Command="{Binding MouseEnterCommand}" />
                            <Helpers:EventToCommand Event="MouseLeave" Command="{Binding MouseLeaveCommand}" />
                        </Helpers:EventToCommandCollection>
                    </Helpers:EventToCommandAdapter.EventsToCommands>
                </Button>
            </StackPanel>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.EventToCommandAdapter.GetEventToCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the attached <see cref="T:DW.WPFToolkit.Helpers.EventToCommand"/> behavior.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Helpers.EventToCommandAdapter.EventToCommand property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.EventToCommandAdapter.SetEventToCommand(System.Windows.DependencyObject,DW.WPFToolkit.Helpers.EventToCommand)">
            <summary>
            Sets the attached <see cref="T:DW.WPFToolkit.Helpers.EventToCommand"/> behavior.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Helpers.EventToCommandAdapter.EventToCommand value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.EventToCommandAdapter.EventToCommandProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Helpers.EventToCommandAdapter.GetEventToCommand(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Helpers.EventToCommandAdapter.SetEventToCommand(System.Windows.DependencyObject,DW.WPFToolkit.Helpers.EventToCommand)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.EventToCommandAdapter.GetEventsToCommands(System.Windows.DependencyObject)">
            <summary>
            Gets the attached <see cref="T:DW.WPFToolkit.Helpers.EventToCommandCollection"/> behavior.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Helpers.EventToCommandAdapter.EventsToCommands property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.EventToCommandAdapter.SetEventsToCommands(System.Windows.DependencyObject,DW.WPFToolkit.Helpers.EventToCommandCollection)">
            <summary>
            Sets the attached <see cref="T:DW.WPFToolkit.Helpers.EventToCommandCollection"/> behavior.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Helpers.EventToCommandAdapter.EventsToCommands value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.EventToCommandAdapter.EventsToCommandsProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Helpers.EventToCommandAdapter.GetEventsToCommands(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Helpers.EventToCommandAdapter.SetEventsToCommands(System.Windows.DependencyObject,DW.WPFToolkit.Helpers.EventToCommandCollection)"/> attached property.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.EventToCommand">
            <summary>
            Brings the possibility to connect any event from a UI control with an ICommand.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <StackPanel>
                <Button Content="Demo Single">
                    <Helpers:EventToCommandAdapter.EventToCommand>
                        <Helpers:EventToCommand Event="MouseLeave" Command="{Binding MouseLeaveCommand}" />
                    </Helpers:EventToCommandAdapter.EventToCommand>
                </Button>
                
                <Button Content="Demo Multiple">
                    <Helpers:EventToCommandAdapter.EventsToCommands>
                        <Helpers:EventToCommandCollection>
                            <Helpers:EventToCommand Event="Click" Command="{Binding ClickCommand}" />
                            <Helpers:EventToCommand Event="MouseEnter" Command="{Binding MouseEnterCommand}" />
                            <Helpers:EventToCommand Event="MouseLeave" Command="{Binding MouseLeaveCommand}" />
                        </Helpers:EventToCommandCollection>
                    </Helpers:EventToCommandAdapter.EventsToCommands>
                </Button>
            </StackPanel>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.EventToCommand.EventProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.EventToCommand.Event"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.EventToCommand.CommandProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.EventToCommand.Command"/> dependency property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.EventToCommand.CommandParameterProperty">
            <summary>
            Identifies the <see cref="P:DW.WPFToolkit.Helpers.EventToCommand.CommandParameter"/> dependency property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.EventToCommand.Initialize(System.Windows.FrameworkElement)">
            <summary>
            Initializes <see cref="T:DW.WPFToolkit.Helpers.EventToCommand"/> object with the control which event should be catched.
            </summary>
            <param name="owner">The control which event should be catched.</param>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.EventToCommand.Dispose">
            <summary>
            Disposes the <see cref="P:DW.WPFToolkit.Helpers.EventToCommand.CommandParameter"/> to free it from its owner. <see cref="M:DW.WPFToolkit.Helpers.EventToCommand.Initialize(System.Windows.FrameworkElement)"/> can be called afterwards again.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.EventToCommand.Event">
            <summary>
            Gets or sets the event name to listen to.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.EventToCommand.Command">
            <summary>
            Gets or sets the command to be executed when the event (given by <see cref="P:DW.WPFToolkit.Helpers.EventToCommand.Event"/>) got raised.
            </summary>
            <remarks>If <see cref="P:DW.WPFToolkit.Helpers.EventToCommand.CommandParameter"/> is null, the command parameter will be the EventArgs from the event.</remarks>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.EventToCommand.CommandParameter">
            <summary>
            Gets or sets the command parameter to sent with the <see cref="P:DW.WPFToolkit.Helpers.EventToCommand.Event"/>.
            </summary>
            <remarks>If its null, the command parameter will be the EventArgs from the event.</remarks>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.EventToCommandCollection">
            <summary>
            Represents a collection of <see cref="T:DW.WPFToolkit.Helpers.EventToCommand"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.KeyboardWatcher">
            <summary>
            Brings possibilities to listen for keyboard events even the current application has not the focus. Its the so called System Keyboard Hooks.
            </summary>
            <example>
            <code lang="csharp">
            <![CDATA[
            public class MainViewModel
            {
                public MainViewModel()
                {
                    var watcher = new KeyboardWatcher();
                    watcher.AddCallback(KeyPressed);
            
                    watcher.BeginWatch();
                }
            
                private void KeyPressed(KeyStateChangedArgs e)
                {
                    if (e.Key == Key.F10 && e.State == KeyState.Pressed)
                    {
                        // User Pressed the F10 key
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Helpers.KeyboardWatcher"/> class.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatcher.AddCallback(System.Action{DW.WPFToolkit.Helpers.KeyStateChangedArgs})">
            <summary>
            Registers a callback which got called no matter which keys were pressed or released.
            </summary>
            <param name="callback">The callback to be called.</param>
            <returns>A token which represends the current callback to be used for <see cref="M:DW.WPFToolkit.Helpers.KeyboardWatcher.RemoveCallback(DW.WPFToolkit.Helpers.KeyboardWatchToken)"/>.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatcher.AddCallback(DW.WPFToolkit.Helpers.KeyState,System.Action{DW.WPFToolkit.Helpers.KeyStateChangedArgs})">
            <summary>
            Registers a callback which got called no matter which keys came into the specific state.
            </summary>
            <param name="state">The key state which has to be watched for.</param>
            <param name="callback">The callback to be called.</param>
            <returns>A token which represends the current callback to be used for <see cref="M:DW.WPFToolkit.Helpers.KeyboardWatcher.RemoveCallback(DW.WPFToolkit.Helpers.KeyboardWatchToken)"/>.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatcher.AddCallback(System.Collections.Generic.IEnumerable{DW.WPFToolkit.Helpers.KeyState},System.Action{DW.WPFToolkit.Helpers.KeyStateChangedArgs})">
            <summary>
            Registers a callback which got called no matter which keys came into the specific states.
            </summary>
            <param name="states">The key states which has to be watched for.</param>
            <param name="callback">The callback to be called.</param>
            <returns>A token which represends the current callback to be used for <see cref="M:DW.WPFToolkit.Helpers.KeyboardWatcher.RemoveCallback(DW.WPFToolkit.Helpers.KeyboardWatchToken)"/>.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatcher.AddCallback(System.Windows.Input.Key,System.Action{DW.WPFToolkit.Helpers.KeyStateChangedArgs})">
            <summary>
            Registers a callback which got called if the specific key changed its state.
            </summary>
            <param name="key">The key which has to be watched for.</param>
            <param name="callback">The callback to be called.</param>
            <returns>A token which represends the current callback to be used for <see cref="M:DW.WPFToolkit.Helpers.KeyboardWatcher.RemoveCallback(DW.WPFToolkit.Helpers.KeyboardWatchToken)"/>.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatcher.AddCallback(System.Collections.Generic.IEnumerable{System.Windows.Input.Key},System.Action{DW.WPFToolkit.Helpers.KeyStateChangedArgs})">
            <summary>
            Registers a callback which got called if one of the given key changed their state.
            </summary>
            <param name="keys">The keys which has to be watched for.</param>
            <param name="callback">The callback to be called.</param>
            <returns>A token which represends the current callback to be used for <see cref="M:DW.WPFToolkit.Helpers.KeyboardWatcher.RemoveCallback(DW.WPFToolkit.Helpers.KeyboardWatchToken)"/>.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatcher.AddCallback(System.Windows.Input.Key,DW.WPFToolkit.Helpers.KeyState,System.Action{DW.WPFToolkit.Helpers.KeyStateChangedArgs})">
            <summary>
            Registers a callback which got called if the specific key changed its state to the given one.
            </summary>
            <param name="key">The key which has to be watched for.</param>
            <param name="state">The key state which has to be watched for.</param>
            <param name="callback">The callback to be called.</param>
            <returns>A token which represends the current callback to be used for <see cref="M:DW.WPFToolkit.Helpers.KeyboardWatcher.RemoveCallback(DW.WPFToolkit.Helpers.KeyboardWatchToken)"/>.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatcher.AddCallback(System.Windows.Input.Key,System.Collections.Generic.IEnumerable{DW.WPFToolkit.Helpers.KeyState},System.Action{DW.WPFToolkit.Helpers.KeyStateChangedArgs})">
            <summary>
            Registers a callback which got called if the specific key changed its state to one of the given states.
            </summary>
            <param name="key">The key which has to be watched for.</param>
            <param name="states">The key states which has to be watched for.</param>
            <param name="callback">The callback to be called.</param>
            <returns>A token which represends the current callback to be used for <see cref="M:DW.WPFToolkit.Helpers.KeyboardWatcher.RemoveCallback(DW.WPFToolkit.Helpers.KeyboardWatchToken)"/>.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatcher.AddCallback(System.Collections.Generic.IEnumerable{System.Windows.Input.Key},DW.WPFToolkit.Helpers.KeyState,System.Action{DW.WPFToolkit.Helpers.KeyStateChangedArgs})">
            <summary>
            Registers a callback which got called if one of the given keys changed their state to the specific one.
            </summary>
            <param name="keys">The keys which has to be watched for.</param>
            <param name="state">The key state which has to be watched for.</param>
            <param name="callback">The callback to be called.</param>
            <returns>A token which represends the current callback to be used for <see cref="M:DW.WPFToolkit.Helpers.KeyboardWatcher.RemoveCallback(DW.WPFToolkit.Helpers.KeyboardWatchToken)"/>.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatcher.AddCallback(System.Collections.Generic.IEnumerable{System.Windows.Input.Key},System.Collections.Generic.IEnumerable{DW.WPFToolkit.Helpers.KeyState},System.Action{DW.WPFToolkit.Helpers.KeyStateChangedArgs})">
            <summary>
            Registers a callback which got called if one of the given keys changed their state to one of the given states.
            </summary>
            <param name="keys">The keys which has to be watched for.</param>
            <param name="states">The key states which has to be watched for.</param>
            <param name="callback">The callback to be called.</param>
            <returns>A token which represends the current callback to be used for <see cref="M:DW.WPFToolkit.Helpers.KeyboardWatcher.RemoveCallback(DW.WPFToolkit.Helpers.KeyboardWatchToken)"/>.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatcher.RemoveCallback(DW.WPFToolkit.Helpers.KeyboardWatchToken)">
            <summary>
            Removes a registered callbacks by the token.
            </summary>
            <param name="token">The token of the registered callback.</param>
            <remarks>If the token is not known anymore nothing happen.</remarks>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatcher.ClearCallbacks">
            <summary>
            Removes all known callbacks.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatcher.BeginWatch">
            <summary>
            Begin watching for system wide keyboard events.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatcher.StopWatch">
            <summary>
            Stop watching for system wide keyboard events.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatcher.Dispose">
            <summary>
            Disposes the object. It calls <see cref="M:DW.WPFToolkit.Helpers.KeyboardWatcher.StopWatch"/> if not done already.
            </summary>
        </member>
        <member name="E:DW.WPFToolkit.Helpers.KeyboardWatcher.KeyStateChanged">
            <summary>
            Occurs when the user pressed or released key.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.KeyboardWatchToken">
            <summary>
            Represents a token which stands for a callback in the <see cref="T:DW.WPFToolkit.Helpers.KeyboardWatcher"/>.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyboardWatchToken.Equals(DW.WPFToolkit.Helpers.KeyboardWatchToken)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise false.</returns>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.KeyState">
            <summary>
            Defines the state of a key.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.KeyState.Pressed">
            <summary>
            The key is in the pressed state.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.KeyState.Released">
            <summary>
            The key is in the released state.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.KeyStateChangedArgs">
            <summary>
            Holds all information which was happen to a key catched from the <see cref="T:DW.WPFToolkit.Helpers.KeyboardWatcher"/>.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.KeyStateChangedArgs.#ctor(System.Windows.Input.Key,DW.WPFToolkit.Helpers.KeyState)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Helpers.KeyStateChangedArgs"/> class.
            </summary>
            <param name="key">The key which state has been changed.</param>
            <param name="state">The actual state of the key.</param>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.KeyStateChangedArgs.Key">
            <summary>
            Gets the key which state has been changed.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.KeyStateChangedArgs.State">
            <summary>
            Gets the actual state of the key.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.PopupHandler">
            <summary>
            This objects help to determine when a popup has to be closed. This can be by clicking somewhere else, clicking in the title bar or moving the window.
            </summary>
            <example>
            <code lang="csharp">
            <![CDATA[
            public class Control : ContentControl
            {
                private PopupHandler _popupHandler;
            
                public override void OnApplyTemplate()
                {
                    var popup = GetTemplateChild("PART_Popup") as Popup;
                    if (popup == null)
                        return;
            
                    _popupHandler = new PopupHandler();
                    _popupHandler.AutoClose(popup, OnPopupClosed);
                }
            
                private void OnPopupClosed()
                {
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.PopupHandler.AutoClose(System.Windows.UIElement,System.Action)">
            <summary>
            Starts an observing of the window which contains the control to determine when the item has to be closed.
            </summary>
            <param name="observedControl">The control which owner window has to be observed.</param>
            <param name="closeMethod">The close callback. This gets invoked when the owner window has send notifications to close the popup.</param>
            <exception cref="T:System.ArgumentNullException">observedControl is null.</exception>
            <exception cref="T:System.ArgumentNullException">closeMethod is null.</exception>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.VisualTreeAssist">
            <summary>
            Brings many possibilities to find elements in the visual tree. See <see cref="T:System.Windows.Media.VisualTreeHelper"/>.
            </summary>
            <example>
            <code lang="csharp">
            <![CDATA[
            var childButton = VisualTreeAssist.FindChild<Button>(this);
            
            var namedChildTextBox = VisualTreeAssist.FindNamedChild<TextBox>(this, "PART_TextBox");
            
            var firstUserControlInWindow = VisualTreeAssist.GetParentsUntil<UserControl, Window>(this);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.VisualTreeAssist.FindParent``1(System.Windows.DependencyObject)">
            <summary>
            Searches for a parent control by its type.
            </summary>
            <typeparam name="TParentType">The type of the parent control to search for.</typeparam>
            <param name="item">The child control where the search is start from. If this its null the default(TParentType) will returned.</param>
            <returns>The found parent control if any; otherwise default(TParentType). Its also default(TParentType) if the passed item is null.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.VisualTreeAssist.FindNamedParent(System.Windows.DependencyObject,System.String)">
            <summary>
            Searches for a parent control by its name.
            </summary>
            <param name="item">The child control where the search is start from. If this its null this method returns null.</param>
            <param name="name">The name of the parent control to search for. If this its null, empty or just whitespaces this method returns null.</param>
            <returns>The found parent control if any; otherwise null. Its also null if the passed item is null or the passed parent name is null, empty or just whitespaces.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.VisualTreeAssist.FindNamedParent``1(System.Windows.DependencyObject,System.String)">
            <summary>
            Searches for a parent control by its type and name.
            </summary>
            <typeparam name="TParentType">The type of the parent control to search for.</typeparam>
            <param name="item">The child control where the search is start from. If this its null the default(TParentType) will returned.</param>
            <param name="name">The name of the parent control to search for. If this its null, empty or just whitespaces this method returns null.</param>
            <returns>The found parent control if any; otherwise default(TParentType). Its also default(TParentType) if the passed item is null or the name is null, empty or just whitespaces.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.VisualTreeAssist.GetParents``1(System.Windows.DependencyObject)">
            <summary>
            Gets all parent controls with the specific type.
            </summary>
            <typeparam name="TParentType">The type of the parent controls to search for.</typeparam>
            <param name="item">The child control where the search is start from. If this is null the returned list is empty.</param>
            <returns>A list of found parent controls. This is empty if no control has been found.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.VisualTreeAssist.GetParentCount``1(System.Windows.DependencyObject)">
            <summary>
            Gets the amount of parent controls which are the given type.
            </summary>
            <typeparam name="TParentType">The type of the parent control to check for.</typeparam>
            <param name="item">The child control where the search is start from. If this its null this method will return 0.</param>
            <returns>The amount of found parent controls with the specific type. 0 if nothing is found or the passed item is null.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.VisualTreeAssist.GetParentsUntil``2(System.Windows.DependencyObject)">
            <summary>
            Gets all parent controls with the specific type as long no control with the second control type is found.
            </summary>
            <typeparam name="TParentType">The type of the parent controls to search for.</typeparam>
            <typeparam name="TEndType">The type of the parent control when to stop searching.</typeparam>
            <param name="item">The child control where the search is start from. If this is null the returned list is empty.</param>
            <returns>A list of found parent controls. This is empty if no control has been found.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.VisualTreeAssist.GetParentsUntilCount``2(System.Windows.DependencyObject)">
            <summary>
            Gets the amount of parent controls which are the given type as long no control with the second control type is found.
            </summary>
            <typeparam name="TParentType">The type of the parent control to check for.</typeparam>
            <typeparam name="TEndType">The type of the parent control when to stop counting.</typeparam>
            <param name="item">The child control where the search is start from. If this its null this method will return 0.</param>
            <returns>The amount of found parent controls with the specific type. 0 if nothing is found or the passed item is null.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.VisualTreeAssist.FindChild``1(System.Windows.DependencyObject)">
            <summary>
            Searches for a specific child element by its type.
            </summary>
            <typeparam name="TChildType">The type of the child control to search for.</typeparam>
            <param name="item">The control where the search is start from. If this its null the default(TChildType) will returned.</param>
            <returns>The found child control if any; otherwise default(TChildType). Its also default(TParentType) if the passed item is null.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.VisualTreeAssist.FindNamedChild(System.Windows.DependencyObject,System.String)">
            <summary>
            Searches for a specific child element by its name.
            </summary>
            <param name="item">The control where the search is start from. If this its null this method returns null.</param>
            <param name="name">The name of the child control to search for. If this its null, empty or just whitespaces this method returns null.</param>
            <returns>The found child control if any; otherwise null. It is also null if the passed item is null or the passed name is null, empty or just whitespaces.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.VisualTreeAssist.FindNamedChild``1(System.Windows.DependencyObject,System.String)">
            <summary>
            Searches for a specific child element by its type and name
            </summary>
            <typeparam name="TChildType">The type of the child control to search for.</typeparam>
            <param name="item">The control where the search is start from. If this its null this method returns default(TChildType).</param>
            <param name="name">The name of the child control to search for if any; otherwise default(TChildType). If this its null, empty or just whitespaces this method returns default(TChildType).</param>
            <returns>The found child control if any; otehrwise default(TChildType). It is also default(TChildType) if the item passed is null or the passed name is null, empty or just whitespaces.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.VisualTreeAssist.GetChildren``1(System.Windows.DependencyObject)">
            <summary>
            Gets all child elements with a specific type.
            </summary>
            <typeparam name="TChildType">The type of the child control to search for.</typeparam>
            <param name="item">The control where the search is start from. If this its null this method returns an empty list.</param>
            <returns>A list of found child controls. This is empty if no control has been found.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.VisualTreeAssist.GetChildrenCount``1(System.Windows.DependencyObject)">
            <summary>
            Gets the amount of child elements by their type.
            </summary>
            <typeparam name="TChildType">The type of the child control to check for.</typeparam>
            <param name="item">The control where the search is start from. If this its null this method returns 0.</param>
            <returns>The amount of child controls by the specific type if any; otherwise 0. It is also 0 if the passed item is null.</returns>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.NotifyEventArgs">
            <summary>
            Holds the data passed when a specific WinAPI message has appear. This is used in the <see cref="T:DW.WPFToolkit.Helpers.WindowObserver"/>.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.NotifyEventArgs.ObservedWindow">
            <summary>
            Gets the window which has raised the specific WinAPI message.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Helpers.NotifyEventArgs.MessageId">
            <summary>
            Gets the appeared WinAPI message. See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.WindowMessages">
            <summary>
            Contains a lot of available WinAPI messages. 
            See http://msdn.microsoft.com/en-us/library/ff468922(v=VS.85).aspx 
            or http://msdn.microsoft.com/en-us/library/windows/desktop/ms644927(v=vs.85).aspx
            or http://www.autohotkey.com/docs/misc/SendMessageList.htm
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NULL">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CREATE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DESTROY">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MOVE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SIZE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_ACTIVATE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SETFOCUS">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_KILLFOCUS">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_ENABLE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SETREDRAW">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SETTEXT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_GETTEXT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_GETTEXTLENGTH">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_PAINT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CLOSE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_QUERYENDSESSION">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_QUIT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_QUERYOPEN">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_ERASEBKGND">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SYSCOLORCHANGE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_ENDSESSION">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SYSTEMERROR">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SHOWWINDOW">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CTLCOLOR">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_WININICHANGE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SETTINGCHANGE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DEVMODECHANGE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_ACTIVATEAPP">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_FONTCHANGE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_TIMECHANGE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CANCELMODE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SETCURSOR">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MOUSEACTIVATE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CHILDACTIVATE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_QUEUESYNC">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_GETMINMAXINFO">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_PAINTICON">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_ICONERASEBKGND">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NEXTDLGCTL">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SPOOLERSTATUS">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DRAWITEM">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MEASUREITEM">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DELETEITEM">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_VKEYTOITEM">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CHARTOITEM">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SETFONT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_GETFONT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SETHOTKEY">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_GETHOTKEY">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_QUERYDRAGICON">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_COMPAREITEM">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_COMPACTING">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_WINDOWPOSCHANGING">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_WINDOWPOSCHANGED">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_POWER">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_COPYDATA">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CANCELJOURNAL">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NOTIFY">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_INPUTLANGCHANGEREQUEST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_INPUTLANGCHANGE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_TCARD">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_HELP">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_USERCHANGED">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NOTIFYFORMAT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CONTEXTMENU">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_STYLECHANGING">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_STYLECHANGED">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DISPLAYCHANGE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_GETICON">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SETICON">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCCREATE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCDESTROY">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCCALCSIZE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCHITTEST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCPAINT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCACTIVATE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_GETDLGCODE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCMOUSEMOVE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCLBUTTONDOWN">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCLBUTTONUP">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCLBUTTONDBLCLK">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCRBUTTONDOWN">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCRBUTTONUP">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCRBUTTONDBLCLK">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCMBUTTONDOWN">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCMBUTTONUP">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCMBUTTONDBLCLK">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_KEYFIRST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_KEYDOWN">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_KEYUP">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CHAR">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DEADCHAR">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SYSKEYDOWN">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SYSKEYUP">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SYSCHAR">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SYSDEADCHAR">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_KEYLAST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_IME_STARTCOMPOSITION">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_IME_ENDCOMPOSITION">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_IME_COMPOSITION">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_IME_KEYLAST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_INITDIALOG">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_COMMAND">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SYSCOMMAND">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_TIMER">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_HSCROLL">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_VSCROLL">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_INITMENU">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_INITMENUPOPUP">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MENUSELECT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MENUCHAR">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_ENTERIDLE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CTLCOLORMSGBOX">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CTLCOLOREDIT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CTLCOLORLISTBOX">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CTLCOLORBTN">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CTLCOLORDLG">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CTLCOLORSCROLLBAR">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CTLCOLORSTATIC">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MOUSEFIRST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MOUSEMOVE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_LBUTTONDOWN">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_LBUTTONUP">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_LBUTTONDBLCLK">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_RBUTTONDOWN">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_RBUTTONUP">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_RBUTTONDBLCLK">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MBUTTONDOWN">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MBUTTONUP">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MBUTTONDBLCLK">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MOUSEWHEEL">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MOUSEHWHEEL">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_PARENTNOTIFY">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_ENTERMENULOOP">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_EXITMENULOOP">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NEXTMENU">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SIZING">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CAPTURECHANGED">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MOVING">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_POWERBROADCAST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DEVICECHANGE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MDICREATE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MDIDESTROY">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MDIACTIVATE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MDIRESTORE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MDINEXT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MDIMAXIMIZE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MDITILE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MDICASCADE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MDIICONARRANGE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MDIGETACTIVE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MDISETMENU">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_ENTERSIZEMOVE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_EXITSIZEMOVE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DROPFILES">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MDIREFRESHMENU">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_IME_SETCONTEXT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_IME_NOTIFY">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_IME_CONTROL">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_IME_COMPOSITIONFULL">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_IME_SELECT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_IME_CHAR">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_IME_KEYDOWN">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_IME_KEYUP">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MOUSEHOVER">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_NCMOUSELEAVE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_MOUSELEAVE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CUT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_COPY">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_PASTE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CLEAR">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_UNDO">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_RENDERFORMAT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_RENDERALLFORMATS">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DESTROYCLIPBOARD">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DRAWCLIPBOARD">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_PAINTCLIPBOARD">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_VSCROLLCLIPBOARD">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_SIZECLIPBOARD">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_ASKCBFORMATNAME">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_CHANGECBCHAIN">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_HSCROLLCLIPBOARD">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_QUERYNEWPALETTE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_PALETTEISCHANGING">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_PALETTECHANGED">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_HOTKEY">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_PRINT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_PRINTCLIENT">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_HANDHELDFIRST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_HANDHELDLAST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_PENWINFIRST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_PENWINLAST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_COALESCE_FIRST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_COALESCE_LAST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DDE_FIRST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DDE_INITIATE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DDE_TERMINATE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DDE_ADVISE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DDE_UNADVISE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DDE_ACK">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DDE_DATA">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DDE_REQUEST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DDE_POKE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DDE_EXECUTE">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_DDE_LAST">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_USER">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Helpers.WindowMessages.WM_APP">
            <summary>
            See <see cref="T:DW.WPFToolkit.Helpers.WindowMessages"/>.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Helpers.WindowObserver">
            <summary>
            Brings possibilities to easy listen for WinAPI events.
            </summary>
            <example>
            <code lang="csharp">
            <![CDATA[
            public partial class MainView
            {
                public MainView()
                {
                    InitializeComponent();
            
                    var observer = new WindowObserver(this);
                    observer.AddCallback(OnEventHappened);
                }
            
                private void OnEventHappened(NotifyEventArgs e)
                {
                    if (e.MessageId == WindowMessages.WM_NCLBUTTONDBLCLK)
                    {
                        // User double clicked in the non client area (title bar mostly)
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.WindowObserver.#ctor(System.Windows.Window)">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Helpers.WindowObserver"/> class.
            </summary>
            <param name="observedWindow">The window which WinAPI messages should be observed.</param>
            <exception cref="T:System.ArgumentNullException">observedWindow is null.</exception>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.WindowObserver.AddCallback(System.Action{DW.WPFToolkit.Helpers.NotifyEventArgs})">
            <summary>
            Registers a calback to be invoked when a WinAPI message appears in the observed window.
            </summary>
            <param name="callback">The callback to be invoked when a WinAPI message appears in the observed window.</param>
            <remarks>The callback is not registered as a WeakReference, consider using <see cref="M:DW.WPFToolkit.Helpers.WindowObserver.RemoveCallback(System.Action{DW.WPFToolkit.Helpers.NotifyEventArgs})"/> to remove a callback if its not needed anymore.</remarks>
            <exception cref="T:System.ArgumentNullException">callback is null.</exception>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.WindowObserver.AddCallbackFor(System.Nullable{System.Int32},System.Action{DW.WPFToolkit.Helpers.NotifyEventArgs})">
            <summary>
            Registers a calback to be invoked when the specific WinAPI message appears in the observed window.
            </summary>
            <param name="messageId">The WinAPI message to listen for. If its null all WinAPI messages will be forwarded to the callback.</param>
            <param name="callback">The callback to be invoked when the specific WinAPI message appears in the observed window.</param>
            <remarks>The callback is not registered as a WeakReference, consider using <see cref="M:DW.WPFToolkit.Helpers.WindowObserver.RemoveCallback(System.Action{DW.WPFToolkit.Helpers.NotifyEventArgs})"/> to remove a callback if its not needed anymore.</remarks>
            <exception cref="T:System.ArgumentNullException">callback is null.</exception>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.WindowObserver.RemoveCallback(System.Action{DW.WPFToolkit.Helpers.NotifyEventArgs})">
            <summary>
            Removed the previous registered callback.
            </summary>
            <param name="callback">The previous registered callback to remove. If it is remoed already nothing happens.</param>
            <exception cref="T:System.ArgumentNullException">callback is null.</exception>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.WindowObserver.ClearCallbacks">
            <summary>
            Removes all registered callbacks.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Helpers.WindowObserver.RemoveCallbacksFor(System.Int32)">
            <summary>
            Removes all callbacks which listen for a specific WinAPI message.
            </summary>
            <param name="messageId">The WinAPI message the callbacks does listen for.</param>
        </member>
        <member name="E:DW.WPFToolkit.Helpers.WindowObserver.Message">
            <summary>
            Occurs when the observed window has send the a WinAPI message.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Interactivity.ColumnSortBehavior">
            <summary>
            Brings the feature to UI elements with a <see cref="T:System.Windows.Controls.GridViewColumnHeader"/> to have a sorting by clicking the corresponding header.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <DataTemplate x:Key="HeaderArrowUp">
                <Grid>
                    <TextBlock Text="{Binding}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                    <Path StrokeThickness="0" SnapsToDevicePixels="True" Data="M 0,4 L 4,0 L 8,4 L 0,4"
                          Margin="0,-2,0,0" VerticalAlignment="Top" HorizontalAlignment="Center">
                        <Path.Fill>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                <GradientStop Color="#FF3C5E72" Offset="0"/>
                                <GradientStop Color="#FFC3E4F5" Offset="1"/>
                            </LinearGradientBrush>
                        </Path.Fill>
                    </Path>
                </Grid>
            </DataTemplate>
            <DataTemplate x:Key="HeaderArrowDown">
                <Grid>
                    <TextBlock Text="{Binding}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                    <Path StrokeThickness="0" SnapsToDevicePixels="True" Data="M 0,0 L 4,4 L 8,0 L 0,0"
                          Margin="0,-2,0,0" VerticalAlignment="Top" HorizontalAlignment="Center">
                        <Path.Fill>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                <GradientStop Color="#FF3C5E72" Offset="0"/>
                                <GradientStop Color="#FFC4E3F4" Offset="1"/>
                            </LinearGradientBrush>
                        </Path.Fill>
                    </Path>
                </Grid>
            </DataTemplate>
            <DataTemplate x:Key="HeaderTransparent">
                <Grid>
                    <TextBlock Text="{Binding}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                </Grid>
            </DataTemplate>
            
            <ListView Interactivity:ColumnSortBehavior.AllowColumnSortings="True"
                      Interactivity:ColumnSortBehavior.AscendingSortHeaderTemplate="{StaticResource HeaderArrowUp}"
                      Interactivity:ColumnSortBehavior.DescendingSortHeaderTemplate="{StaticResource HeaderArrowDown}"
                      Interactivity:ColumnSortBehavior.NeutralHeaderTemplate="{StaticResource HeaderTransparent}">
                <ListView.View>
                    <GridView>
                        <GridViewColumn Header="Name" Interactivity:ColumnSortBehavior.IsDefaultSortColumn="True" Interactivity:ColumnSortBehavior.SortPropertyName="Name" />
                        <GridViewColumn Header="Size" Interactivity:ColumnSortBehavior.SortPropertyName="Size" />
                        <GridViewColumn Header="Date" Interactivity:ColumnSortBehavior.SortPropertyName="Date" />
                    </GridView>
                </ListView.View>
            </ListView>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.GetNeutralHeaderTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the header template to be used for sorting if the column is not used for sort actually.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ColumnSortBehavior.NeutralHeaderTemplate property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.SetNeutralHeaderTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Attaches the header template to be used for sorting if the column is not used for sort actually.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ColumnSortBehavior.NeutralHeaderTemplate value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnSortBehavior.NeutralHeaderTemplateProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.GetNeutralHeaderTemplate(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.SetNeutralHeaderTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.GetAscendingSortHeaderTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the header template to be used for sorting if the column is used for sort ascending actually.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ColumnSortBehavior.AscendingSortHeaderTemplate property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.SetAscendingSortHeaderTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Attaches the header template to be used for sorting if the column is used for sort ascending actually.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ColumnSortBehavior.AscendingSortHeaderTemplate value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnSortBehavior.AscendingSortHeaderTemplateProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.GetAscendingSortHeaderTemplate(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.SetAscendingSortHeaderTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.GetDescendingSortHeaderTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets the header template to be used for sorting if the column is used for sort descending actually.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ColumnSortBehavior.DescendingSortHeaderTemplate property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.SetDescendingSortHeaderTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Attaches the header template to be used for sorting if the column is used for sort descending actually.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ColumnSortBehavior.DescendingSortHeaderTemplate value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnSortBehavior.DescendingSortHeaderTemplateProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.GetDescendingSortHeaderTemplate(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.SetDescendingSortHeaderTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.GetAllowColumnSortings(System.Windows.DependencyObject)">
            <summary>
            Gets the value that indicates if sorting is allowed or not.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ColumnSortBehavior.AllowColumnSortings property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.SetAllowColumnSortings(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attaches the value if sorting is allowed or not.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ColumnSortBehavior.AllowColumnSortings value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnSortBehavior.AllowColumnSortingsProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.GetAllowColumnSortings(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.SetAllowColumnSortings(System.Windows.DependencyObject,System.Boolean)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.GetIsDefaultSortColumn(System.Windows.DependencyObject)">
            <summary>
            Gets a value that indicates if a column is defined as default sort column or not.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ColumnSortBehavior.IsDefaultSortColumn property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.SetIsDefaultSortColumn(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attaches a value that indicates if a column is defined as default sort column or not.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ColumnSortBehavior.IsDefaultSortColumn value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnSortBehavior.IsDefaultSortColumnProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.GetIsDefaultSortColumn(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.SetIsDefaultSortColumn(System.Windows.DependencyObject,System.Boolean)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.GetSortPropertyName(System.Windows.DependencyObject)">
            <summary>
            Gets the property name to be used for sorting.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ColumnSortBehavior.SortPropertyName property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.SetSortPropertyName(System.Windows.DependencyObject,System.String)">
            <summary>
            Attaches the property name to be used for sorting.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ColumnSortBehavior.SortPropertyName value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnSortBehavior.SortPropertyNameProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.GetSortPropertyName(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.SetSortPropertyName(System.Windows.DependencyObject,System.String)"/> attached property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnSortBehavior.ColumnSortingBehaviorProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.GetColumnSortingBehavior(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ColumnSortBehavior.SetColumnSortingBehavior(System.Windows.DependencyObject,DW.WPFToolkit.Interactivity.ColumnSortBehavior)"/> attached property.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior">
            <summary>
            Brings the feature to controls with a <see cref="T:System.Windows.Controls.GridViewColumnHeader"/> to show or hide columns dynamically.
            </summary>
            <example>
            <code lang="csharp">
            <![CDATA[
            public class MainViewModel : ObservableObject
            {
                public MainViewModel()
                {
                    VisibleColumnNames = new EnhancedObservableCollection<string> { "Name", "Size" };
                }
            
                public EnhancedObservableCollection<string> VisibleColumnNames { get; private set; }
            }
            ]]>
            </code>
            
            <code lang="XAML"> 
            <![CDATA[
            <ListView Interactivity:ColumnVisibilityBehavior.VisibleColumns="{Binding VisibleColumnNames}">
                <ListView.View>
                    <GridView>
                        <GridViewColumn Header="Name" DisplayMemberBinding="{Binding Name}" Interactivity:ColumnVisibilityBehavior.Name="Name" />
                        <GridViewColumn Header="Size" DisplayMemberBinding="{Binding Size}" Interactivity:ColumnVisibilityBehavior.Name="Size" />
                        <GridViewColumn Header="Date" DisplayMemberBinding="{Binding Date}" Interactivity:ColumnVisibilityBehavior.Name="Date" />
                    </GridView>
                </ListView.View>
            </ListView>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.GetVisibleColumns(System.Windows.DependencyObject)">
            <summary>
            Gets a list of visible columns by their name.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.VisibleColumns property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.SetVisibleColumns(System.Windows.DependencyObject,System.Collections.IList)">
            <summary>
            Attaches a list of visible columns by their name.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.VisibleColumns value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.VisibleColumnsProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.GetVisibleColumns(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.SetVisibleColumns(System.Windows.DependencyObject,System.Collections.IList)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.GetName(System.Windows.DependencyObject)">
            <summary>
            Gets the name of the element.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.Name property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.SetName(System.Windows.DependencyObject,System.Object)">
            <summary>
            Attaches the name.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.Name value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.NameProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.GetName(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.SetName(System.Windows.DependencyObject,System.Object)"/> attached property.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.PositionProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.GetPosition(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ColumnVisibilityBehavior.SetPosition(System.Windows.DependencyObject,System.Int32)"/> attached property.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Interactivity.ColumnResizeKind">
            <summary>
            Defines how the columns has to be resized by the <see cref="T:DW.WPFToolkit.Interactivity.ColumnWidthBehavior"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnResizeKind.NoResize">
            <summary>
            The column widths stays unchanged.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnResizeKind.ByControl">
            <summary>
            The column widths are defined by the owner control width.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnResizeKind.ByContent">
            <summary>
            The column widths are defined by their shown content.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnResizeKind.Proportional">
            <summary>
            The column widths are calculated proportional by the owner control width.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Interactivity.ColumnWidthBehavior">
            <summary>
            Brings the feature to controls with a <see cref="T:System.Windows.Controls.GridViewColumnHeader"/> to have columns with a dynamic width.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <ListView Interactivity:ColumnWidthBehavior.AutoSize="ByContent" />
            
            <ListView Interactivity:ColumnWidthBehavior.AutoSize="Proportional">
                <ListView.View>
                    <GridView>
                        <GridViewColumn Header="Name" DisplayMemberBinding="{Binding Name}" Interactivity:ColumnWidthBehavior.ProportionalWidth="60" />
                        <GridViewColumn Header="Size" DisplayMemberBinding="{Binding Size}" Interactivity:ColumnWidthBehavior.ProportionalWidth="30" />
                        <GridViewColumn Header="Date" DisplayMemberBinding="{Binding Date}" Interactivity:ColumnWidthBehavior.ProportionalWidth="10" />
                    </GridView>
                </ListView.View>
            </ListView>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnWidthBehavior.GetAutoSize(System.Windows.DependencyObject)">
            <summary>
            Gets resize kind for a column.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ColumnWidthBehavior.AutoSize property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnWidthBehavior.SetAutoSize(System.Windows.DependencyObject,DW.WPFToolkit.Interactivity.ColumnResizeKind)">
            <summary>
            Attaches the resize kind for a column.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ColumnWidthBehavior.AutoSize value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnWidthBehavior.AutoSizeProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ColumnWidthBehavior.GetAutoSize(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ColumnWidthBehavior.SetAutoSize(System.Windows.DependencyObject,DW.WPFToolkit.Interactivity.ColumnResizeKind)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnWidthBehavior.GetProportionalWidth(System.Windows.DependencyObject)">
            <summary>
            Gets proportional size in percent for a column.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ColumnWidthBehavior.ProportionalWidth property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnWidthBehavior.SetProportionalWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Attaches the proportional size in percent for a column.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ColumnWidthBehavior.ProportionalWidth value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnWidthBehavior.ProportionalWidthProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ColumnWidthBehavior.GetProportionalWidth(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ColumnWidthBehavior.SetProportionalWidth(System.Windows.DependencyObject,System.Double)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnWidthBehavior.GetTemplatePaddingWidthFix(System.Windows.DependencyObject)">
            <summary>
            Gets additional space left from a column by calculating the width.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ColumnWidthBehavior.TemplatePaddingWidthFix property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ColumnWidthBehavior.SetTemplatePaddingWidthFix(System.Windows.DependencyObject,System.Double)">
            <summary>
            Attaches the additional space left from a column by calculating the width.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ColumnWidthBehavior.TemplatePaddingWidthFix value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ColumnWidthBehavior.TemplatePaddingWidthFixProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ColumnWidthBehavior.GetTemplatePaddingWidthFix(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ColumnWidthBehavior.SetTemplatePaddingWidthFix(System.Windows.DependencyObject,System.Double)"/> attached property.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Interactivity.CutTextKind">
            <summary>
            Defines when the tooltip has to be created by the <see cref="T:DW.WPFToolkit.Interactivity.CutTooltipBehavior"/>.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.CutTextKind.None">
            <summary>
            The auto tooltip is disbaled.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.CutTextKind.Width">
            <summary>
            The tooltip appears when the text is longer than the available space.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.CutTextKind.Height">
            <summary>
            The tooltip appears when the text height is highter than the available space.
            </summary>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.CutTextKind.WithAndHeight">
            <summary>
            The tooltip appears when the text length and height is more than the available space.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Interactivity.CutTooltipBehavior">
            <summary>
            Brings the functionality to the TextBlock and Label to show the text in the tooltip automatically when its cut.
            </summary>
            <remarks>In the case of the Label the Content.ToString() will be used to get the text. If a tooltip is set already it will be overwritten.</remarks>
            <example>
            <code lang="XAML">
            <![CDATA[
            <TextBlock Text="{Binding AnyLongtext}" Interactivity:CutTooltipBehavior.ShowTooltip="Width" />
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.CutTooltipBehavior.GetShowTooltip(System.Windows.DependencyObject)">
            <summary>
            Gets the value that defines when the tooltip should be shown.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>he DW.WPFToolkit.Interactivity.CutTooltipBehavior.ShowTooltip property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.CutTooltipBehavior.SetShowTooltip(System.Windows.DependencyObject,DW.WPFToolkit.Interactivity.CutTextKind)">
            <summary>
            Sets the value that defines when the tooltip should be shown.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.CutTooltipBehavior.ShowTooltip value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.CutTooltipBehavior.ShowTooltipProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.CutTooltipBehavior.GetShowTooltip(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.CutTooltipBehavior.SetShowTooltip(System.Windows.DependencyObject,DW.WPFToolkit.Interactivity.CutTextKind)"/> attached property.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Interactivity.DoubleClickBehavior">
            <summary>
            Brings the feature to be able to double click any UI element.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <TextBlock Text="Doubleclick Me"
                       Interactivity:DoubleClickBehavior.Command="{Binding ItemDoubleClicked}"
                       Interactivity:DoubleClickBehavior.CommandParameter="Parameter" />
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.DoubleClickBehavior.GetCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the command to be called when the element gets double clicked.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.DoubleClickBehavior.Command property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.DoubleClickBehavior.SetCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attaches the command to be called when the element gets double clicked.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.DoubleClickBehavior.Command value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.DoubleClickBehavior.CommandProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.DoubleClickBehavior.GetCommand(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.DoubleClickBehavior.SetCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.DoubleClickBehavior.GetCommandParameter(System.Windows.DependencyObject)">
            <summary>
            Gets the command parameter to be passed when the called when DW.WPFToolkit.Interactivity.DoubleClickBehavior.Command gets called.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.DoubleClickBehavior.CommandParameter property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.DoubleClickBehavior.SetCommandParameter(System.Windows.DependencyObject,System.Object)">
            <summary>
            Attaches the command parameter to be passed when the called when DW.WPFToolkit.Interactivity.DoubleClickBehavior.Command gets called.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.DoubleClickBehavior.CommandParameter value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.DoubleClickBehavior.CommandParameterProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.DoubleClickBehavior.GetCommandParameter(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.DoubleClickBehavior.SetCommandParameter(System.Windows.DependencyObject,System.Object)"/> attached property.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Interactivity.FocusBehavior">
            <summary>
            Brings the feature to set the focus to a specific element or on window launch.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <Window Interactivity:FocusBehavior.ApplicationGotFocusCommand="{Binding SwitchedToApplicationCommand}"
                    Interactivity:FocusBehavior.ApplicationLostFocusCommand="{Binding SwitchedOutFromApplicationCommand}">
            </Window>
            
            <Button Interactivity:FocusBehavior.GotFocusCommand="{Binding ButtonGotFocusCommand}"
                    Interactivity:FocusBehavior.GotFocusCommandParameter="Example" />
            
            <Button Interactivity:FocusBehavior.LostFocusCommand="{Binding ButtonGotFocusCommand}"
                    Interactivity:FocusBehavior.LostFocusCommandParameter="Example" />
             
            <Button Interactivity:FocusBehavior.HasFocus="{Binding IsButtonFocused}" />
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetStartFocusedControl(System.Windows.DependencyObject)">
            <summary>
            Gets the control which has to get the focus when its loaded.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.FocusBehavior.StartFocusedControl property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetStartFocusedControl(System.Windows.DependencyObject,System.Windows.UIElement)">
            <summary>
            Attaches the control which has to get the focus when its loaded.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.FocusBehavior.StartFocusedControl value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.FocusBehavior.StartFocusedControlProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetStartFocusedControl(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetStartFocusedControl(System.Windows.DependencyObject,System.Windows.UIElement)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetHasFocus(System.Windows.DependencyObject)">
            <summary>
            Gets a value that indicates the state if the element has the focus or not.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.FocusBehavior.HasFocus property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetHasFocus(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attaches a value that indicates the state if the element has the focus or not.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.FocusBehavior.HasFocus value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.FocusBehavior.HasFocusProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetHasFocus(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetHasFocus(System.Windows.DependencyObject,System.Boolean)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetLostFocusCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the command to be executed when the element lost its focus.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.FocusBehavior.LostFocusCommand property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetLostFocusCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attaches the command to be executed when the control lost its focus.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.FocusBehavior.LostFocusCommand value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.FocusBehavior.LostFocusCommandProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetLostFocusCommand(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetLostFocusCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetLostFocusCommandParameter(System.Windows.DependencyObject)">
            <summary>
            Gets the parameter to be passed with the DW.WPFToolkit.Interactivity.FocusBehavior.LostFocusCommand.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.FocusBehavior.LostFocusCommandParameter property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetLostFocusCommandParameter(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the parameter to be passed with the DW.WPFToolkit.Interactivity.FocusBehavior.LostFocusCommand.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.FocusBehavior.LostFocusCommandParameter value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.FocusBehavior.LostFocusCommandParameterProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetLostFocusCommandParameter(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetLostFocusCommandParameter(System.Windows.DependencyObject,System.Object)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetGotFocusCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the command to be executed when the element got the focus.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.FocusBehavior.GotFocusCommand property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetGotFocusCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attaches the command to be executed when the control got the focus.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.FocusBehavior.GotFocusCommand value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.FocusBehavior.GotFocusCommandProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetGotFocusCommand(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetGotFocusCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetGotFocusCommandParameter(System.Windows.DependencyObject)">
            <summary>
            Gets the parameter to be passed with the DW.WPFToolkit.Interactivity.FocusBehavior.GotFocusCommand.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.FocusBehavior.GotFocusCommandParameter property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetGotFocusCommandParameter(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the parameter to be passed with the DW.WPFToolkit.Interactivity.FocusBehavior.GotFocusCommand.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.FocusBehavior.GotFocusCommandParameter value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.FocusBehavior.GotFocusCommandParameterProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetGotFocusCommandParameter(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetGotFocusCommandParameter(System.Windows.DependencyObject,System.Object)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetApplicationLostFocusCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the command to be executed when the application is not the foreground application anymore.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationLostFocusCommand property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetApplicationLostFocusCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attaches the command to be executed when the application is not the foreground application anymore.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationLostFocusCommand value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationLostFocusCommandProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetApplicationLostFocusCommand(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetApplicationLostFocusCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetApplicationLostFocusCommandParameter(System.Windows.DependencyObject)">
            <summary>
            Gets the parameter to be passed with the DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationLostFocusCommand.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationLostFocusCommandParameter property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetApplicationLostFocusCommandParameter(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the parameter to be passed with the DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationLostFocusCommand.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationLostFocusCommandParameter value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationLostFocusCommandParameterProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetApplicationLostFocusCommandParameter(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetApplicationLostFocusCommandParameter(System.Windows.DependencyObject,System.Object)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetApplicationGotFocusCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the command to be executed when the application become the foreground application.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationGotFocusCommand property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetApplicationGotFocusCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attaches the command to be executed when the application become the foreground application.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationGotFocusCommand value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationGotFocusCommandProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetApplicationGotFocusCommand(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetApplicationGotFocusCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetApplicationGotFocusCommandParameter(System.Windows.DependencyObject)">
            <summary>
            Gets the parameter to be passed with the DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationGotFocusCommand.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationGotFocusCommandParameter property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetApplicationGotFocusCommandParameter(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the parameter to be passed with the DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationGotFocusCommand.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationGotFocusCommandParameter value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.FocusBehavior.ApplicationGotFocusCommandParameterProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.GetApplicationGotFocusCommandParameter(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.FocusBehavior.SetApplicationGotFocusCommandParameter(System.Windows.DependencyObject,System.Object)"/> attached property.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Interactivity.ListBehavior">
            <summary>
            Gives you some commands when clicking in an ItemsControl or its items.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <ListBox 
                     Interactivity:ListBehavior.ItemDoubleClickedCommand="{Binding ItemDoubleClickedCommand}"
                     
                     Interactivity:ListBehavior.ItemClickedCommand="{Binding ItemClickedCommand}"
                     
                     Interactivity:ListBehavior.EmptyAreaDoubleClickCommand="{Binding EmptyAreaDoubleClickCommand}"
                     Interactivity:ListBehavior.EmptyAreaDoubleClickCommandParameter="Parameter"
                     
                     Interactivity:ListBehavior.EmptyAreaClickCommand="{Binding EmptyAreaClickCommand}"
                     Interactivity:ListBehavior.EmptyAreaClickCommandParameter="Parameter"
                     
                     Interactivity:ListBehavior.AutoDeselect="True"
                     />
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.GetItemDoubleClickedCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the command which will be called when an items in a list gets double clicked.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ListBehavior.ItemDoubleClickedCommand property value for the element.</returns>
            <remarks>If the ItemDoubleClickedCommandParameter is not set, the double clicked item will be passed with the command.</remarks>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.SetItemDoubleClickedCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attaches the command to be called when an items in a list gets double clicked.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ListBehavior.ItemDoubleClickedCommand value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ListBehavior.ItemDoubleClickedCommandProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.GetItemDoubleClickedCommand(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.SetItemDoubleClickedCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.GetItemDoubleClickedCommandParameter(System.Windows.DependencyObject)">
            <summary>
            Gets the command parameter which will be passed with the ItemDoubleClickedCommand.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ListBehavior.ItemDoubleClickedCommandParameter property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.SetItemDoubleClickedCommandParameter(System.Windows.DependencyObject,System.Object)">
            <summary>
            Attaches the command parameter to be passed with the ItemDoubleClickedCommand.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ListBehavior.ItemDoubleClickedCommandParameter value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ListBehavior.ItemDoubleClickedCommandParameterProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.GetItemDoubleClickedCommandParameter(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.SetItemDoubleClickedCommandParameter(System.Windows.DependencyObject,System.Object)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.GetItemClickedCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the command which will be called when an items in a list gets single clicked.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ListBehavior.ItemClickedCommand property value for the element.</returns>
            <remarks>If the ItemClickedCommandParameter is not set, the clicked item will be passed with the command.</remarks>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.SetItemClickedCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attaches the command to be called when an items in a list gets single clicked.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ListBehavior.ItemClickedCommand value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ListBehavior.ItemClickedCommandProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.GetItemClickedCommand(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.SetItemClickedCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.GetItemClickedCommandParameter(System.Windows.DependencyObject)">
            <summary>
            Gets the command parameter which will be passed with the ItemClickedCommand.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ListBehavior.ItemClickedCommandParameter property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.SetItemClickedCommandParameter(System.Windows.DependencyObject,System.Object)">
            <summary>
            Attaches the command parameter to be passed with the ItemClickedCommand.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ListBehavior.ItemClickedCommandParameter value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ListBehavior.ItemClickedCommandParameterProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.GetItemClickedCommandParameter(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.SetItemClickedCommandParameter(System.Windows.DependencyObject,System.Object)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.GetEmptyAreaDoubleClickCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the command which will be called when the area beside the items in a list gets double clicked.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ListBehavior.EmptyAreaDoubleClickCommand property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.SetEmptyAreaDoubleClickCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attaches the command to be called when the area beside the items in a list gets double clicked.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ListBehavior.EmptyAreaDoubleClickCommand value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ListBehavior.EmptyAreaDoubleClickCommandProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.GetEmptyAreaDoubleClickCommand(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.SetEmptyAreaDoubleClickCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.GetEmptyAreaDoubleClickCommandParameter(System.Windows.DependencyObject)">
            <summary>
            Gets the command parameter which will be passed with the EmptyAreaDoubleClickCommand.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ListBehavior.EmptyAreaDoubleClickCommandParameter property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.SetEmptyAreaDoubleClickCommandParameter(System.Windows.DependencyObject,System.Object)">
            <summary>
            Attaches the command parameter to be passed with the EmptyAreaDoubleClickCommand.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ListBehavior.EmptyAreaDoubleClickCommandParameter value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ListBehavior.EmptyAreaDoubleClickCommandParameterProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.GetEmptyAreaDoubleClickCommandParameter(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.SetEmptyAreaDoubleClickCommandParameter(System.Windows.DependencyObject,System.Object)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.GetEmptyAreaClickCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the command which will be called when the area beside the items in a list gets single clicked.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ListBehavior.EmptyAreaDoubleClickCommand property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.SetEmptyAreaClickCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attaches the command to be called when the area beside the items in a list gets single clicked.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ListBehavior.EmptyAreaClickCommand value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ListBehavior.EmptyAreaClickCommandProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.GetEmptyAreaClickCommand(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.SetEmptyAreaClickCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.GetEmptyAreaClickCommandParameter(System.Windows.DependencyObject)">
            <summary>
            Gets the command parameter which will be passed with the EmptyAreaClickCommand.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ListBehavior.EmptyAreaClickCommandParameter property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.SetEmptyAreaClickCommandParameter(System.Windows.DependencyObject,System.Object)">
            <summary>
            Attaches the command parameter to be passed with the EmptyAreaClickCommand.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ListBehavior.EmptyAreaClickCommandParameter value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ListBehavior.EmptyAreaClickCommandParameterProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.GetEmptyAreaClickCommandParameter(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.SetEmptyAreaClickCommandParameter(System.Windows.DependencyObject,System.Object)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.GetAutoDeselect(System.Windows.DependencyObject)">
            <summary>
            Gets the value which indicates if the items should be deselected automatically when the area beside the items got single clicked.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ListBehavior.AutoDeselect property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ListBehavior.SetAutoDeselect(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attaches a value which indicates if the items should be deselected automatically when the area beside the items got single clicked.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ListBehavior.AutoDeselect value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ListBehavior.AutoDeselectProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.GetAutoDeselect(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ListBehavior.SetAutoDeselect(System.Windows.DependencyObject,System.Boolean)"/> attached property.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Interactivity.ScrollBehavior">
            <summary>
            Brings the feature to modify the scroll position of an items control.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <ListBox ItemsSource="{Binding LogEntries}"
                     Interactivity:ScrollBehavior.AutoScrollToLast="True" />
            
            <ListBox ItemsSource="{Binding LogEntries}"
                     Interactivity:ScrollBehavior.ScrollToItem="{Binding ImportantEntry}" />
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ScrollBehavior.GetScrollToItem(System.Windows.DependencyObject)">
            <summary>
            Gets the item to which it has to scroll in a list.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ScrollBehavior.ScrollToItem property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ScrollBehavior.SetScrollToItem(System.Windows.DependencyObject,System.Object)">
            <summary>
            Attaches the item to which it has to scroll in a list.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ScrollBehavior.ScrollToItem value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ScrollBehavior.ScrollToItemProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ScrollBehavior.GetScrollToItem(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ScrollBehavior.SetScrollToItem(System.Windows.DependencyObject,System.Object)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ScrollBehavior.GetAutoScrollToLast(System.Windows.DependencyObject)">
            <summary>
            Gets a value that indicates if a list automaticaly have to scroll to the last item if the item collection changes.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ScrollBehavior.AutoScrollToLast property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ScrollBehavior.SetAutoScrollToLast(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attaches a value that indicates if a list automaticaly have to scroll to the last item if the item collection changes.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ScrollBehavior.AutoScrollToLast value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ScrollBehavior.AutoScrollToLastProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ScrollBehavior.GetAutoScrollToLast(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ScrollBehavior.SetAutoScrollToLast(System.Windows.DependencyObject,System.Boolean)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ScrollBehavior.GetAutoScrollToSelected(System.Windows.DependencyObject)">
            <summary>
            Gets a value that indicates if a list automaticaly have to scroll to the selected item if the selection has been changed.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.ScrollBehavior.AutoScrollToSelected property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.ScrollBehavior.SetAutoScrollToSelected(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attaches a value that indicates if a list automaticaly have to scroll to the selected item if the selection has been changed.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.ScrollBehavior.AutoScrollToSelected value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.ScrollBehavior.AutoScrollToSelectedProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.ScrollBehavior.GetAutoScrollToSelected(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.ScrollBehavior.SetAutoScrollToSelected(System.Windows.DependencyObject,System.Boolean)"/> attached property.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Interactivity.TextBoxBehavior">
            <summary>
            Brings the features to text boxes to define its selection or bound the selection part.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <TextBox Text="{Binding TheText}"
                     Interactivity:TextBoxBehavior.SelectAllOnFocus="True"
                     Interactivity:TextBoxBehavior.SelectedText="{Binding SelectedText}" />
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.TextBoxBehavior.GetSelectedText(System.Windows.DependencyObject)">
            <summary>
            Gets the selected text in a text box.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.TextBoxBehavior.SelectedText property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.TextBoxBehavior.SetSelectedText(System.Windows.DependencyObject,System.String)">
            <summary>
            Attaches the information which text has to be selected in a text box.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.TextBoxBehavior.SelectedText value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.TextBoxBehavior.SelectedTextProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.TextBoxBehavior.GetSelectedText(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.TextBoxBehavior.SetSelectedText(System.Windows.DependencyObject,System.String)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.TextBoxBehavior.GetSelectAllOnFocus(System.Windows.DependencyObject)">
            <summary>
            Gets a value that indicates if everything has to be selected automatically when the text box got the focus.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.TextBoxBehavior.SelectAllOnFocus property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.TextBoxBehavior.SetSelectAllOnFocus(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attaches a value that indicates if everything has to be selected automatically when the text box got the focus.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.TextBoxBehavior.SelectedText value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.TextBoxBehavior.SelectAllOnFocusProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.TextBoxBehavior.GetSelectAllOnFocus(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.TextBoxBehavior.SetSelectAllOnFocus(System.Windows.DependencyObject,System.Boolean)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.TextBoxBehavior.GetRefreshBindingOnKey(System.Windows.DependencyObject)">
            <summary>
            Gets a value that indicates on which key the text binding has to be refreshed in a text box.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.TextBoxBehavior.RefreshBindingOnKey property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.TextBoxBehavior.SetRefreshBindingOnKey(System.Windows.DependencyObject,System.Windows.Input.Key)">
            <summary>
            Attaches a value that indicates on which key the text binding has to be refreshed in a text box.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.TextBoxBehavior.RefreshBindingOnKey value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.TextBoxBehavior.RefreshBindingOnKeyProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.TextBoxBehavior.GetRefreshBindingOnKey(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.TextBoxBehavior.SetRefreshBindingOnKey(System.Windows.DependencyObject,System.Windows.Input.Key)"/> attached property.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Interactivity.WindowBehavior">
            <summary>
            Brings the feature to a <see cref="T:System.Windows.Window"/> to bind loading and closing action or easy close with dialog result.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <Window Interactivity:WindowBehavior.ClosingCommand="{Binding ClosingCommand}">
            
                <Button Content="Close" Interactivity:WindowBehavior.DialogResult="True" />
                
                <Button Content="Try Close" Interactivity:WindowBehavior.DialogResultCommand="{Binding TryCloseCommand}" />
            
            </Window>
            ]]>
            </code>
            
            <code lang="csharp">
            <![CDATA[
            public class MainViewModel : ObservableObject
            {
                public MainViewModel()
                {
                    TryCloseCommand = new DelegateCommand<WindowClosingArgs>(TryClose);
                }
            
                public DelegateCommand<WindowClosingArgs> TryCloseCommand { get; private set; }
            
                private void TryClose(WindowClosingArgs e)
                {
                    // Ask user if really close
                    e.Cancel = true;
            
                    //e.DialogResult = false;
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetDialogResult(System.Windows.DependencyObject)">
            <summary>
            Gets the dialog result from a button to be called on the owner window.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.WindowBehavior.DialogResult property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetDialogResult(System.Windows.DependencyObject,System.Nullable{System.Boolean})">
            <summary>
            Attaches the dialog result to a button to be called on the owner window.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.WindowBehavior.DialogResult value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.WindowBehavior.DialogResultProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetDialogResult(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetDialogResult(System.Windows.DependencyObject,System.Nullable{System.Boolean})"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetDialogResultCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the dialog result command from a button to get the dialog result called on the owner window.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.WindowBehavior.DialogResultCommand property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetDialogResultCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attaches the dialog result command to a button to get the dialog result called on the owner window.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.WindowBehavior.DialogResultCommand value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.WindowBehavior.DialogResultCommandProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetDialogResultCommand(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetDialogResultCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetClosingCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the command from a window which get called when the window closes. A WindowClosingArgs is passed as a parameter to change the dialog result and cancel the close.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.WindowBehavior.ClosingCommand property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetClosingCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attaches the command to a window which get called when the window closes. A WindowClosingArgs is passed as a parameter to change the dialog result and cancel the close.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.WindowBehavior.ClosingCommand value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.WindowBehavior.ClosingCommandProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetClosingCommand(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetClosingCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetClosedCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the command from a window which get called when the window has been closed. A WindowClosingArgs is passed as a parameter to change the dialog result and cancel the close.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.WindowBehavior.ClosedCommand property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetClosedCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attaches the command to a window which get called when the window closes.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.WindowBehavior.ClosingCommand value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.WindowBehavior.ClosedCommandProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetClosedCommand(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetClosedCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetLoadedCommand(System.Windows.DependencyObject)">
            <summary>
            Gets the command from a window which get called when the window is loaded.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.WindowBehavior.LoadedCommand property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetLoadedCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attaches the command to a window which get called when the window is loaded.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.WindowBehavior.LoadedCommand value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.WindowBehavior.LoadedCommandProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetLoadedCommand(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetLoadedCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetLoadedCommandParameter(System.Windows.DependencyObject)">
            <summary>
            Gets the command parameter from a window which is passed by the DW.WPFToolkit.Interactivity.WindowBehavior.LoadedCommand.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.WindowBehavior.LoadedCommandParameter property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetLoadedCommandParameter(System.Windows.DependencyObject,System.Object)">
            <summary>
            Attaches the command parameter from a window which is passed by the DW.WPFToolkit.Interactivity.WindowBehavior.LoadedCommand.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.WindowBehavior.LoadedCommandParameter value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.WindowBehavior.LoadedCommandParameterProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetLoadedCommandParameter(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetLoadedCommandParameter(System.Windows.DependencyObject,System.Object)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetIsClose(System.Windows.DependencyObject)">
            <summary>
            Gets a value from a button that indicates that the window have to be closed when the button is pressed without using the dialog result.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.WindowBehavior.IsClose property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetIsClose(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attaches a value from a button that indicates that the window have to be closed when the button is pressed without using the dialog result.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.WindowBehavior.IsClose value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.WindowBehavior.IsCloseProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetIsClose(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetIsClose(System.Windows.DependencyObject,System.Boolean)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetWinApiMessages(System.Windows.DependencyObject)">
            <summary>
            Gets a list of hex values of a WinAPI messages to listen and forwarded to the DW.WPFToolkit.Interactivity.WindowBehavior.WinApiCommand.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.WindowBehavior.WinApiMessages property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetWinApiMessages(System.Windows.DependencyObject,System.String)">
            <summary>
            Attaches a list of hex values of a WinAPI messages to listen and forwarded to the DW.WPFToolkit.Interactivity.WindowBehavior.WinApiCommand.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.WindowBehavior.WinApiMessages value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.WindowBehavior.WinApiMessagesProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetWinApiMessages(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetWinApiMessages(System.Windows.DependencyObject,System.String)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetWinApiCommand(System.Windows.DependencyObject)">
            <summary>
            Gets a command which get called if one of the message attached by the DW.WPFToolkit.Interactivity.WindowBehavior.WinApiMessages occurs.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.WindowBehavior.WinApiCommand property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetWinApiCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attaches a command which get called if one of the message attached by the DW.WPFToolkit.Interactivity.WindowBehavior.WinApiMessages occurs.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.WindowBehavior.WinApiCommand value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.WindowBehavior.WinApiCommandProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.GetWinApiCommand(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.WindowBehavior.SetWinApiCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)"/> attached property.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Interactivity.WindowClosingArgs">
            <summary>
            Holds the information if the window can be closed or not. If yes it holds also the information how the DialogResult has to be. This object is used by the <see cref="T:DW.WPFToolkit.Interactivity.WindowBehavior"/>.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowClosingArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DW.WPFToolkit.Interactivity.WindowClosingArgs"/> class.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Interactivity.WindowClosingArgs.DialogResult">
            <summary>
            Gets or sets the value which indicates how to close the dialog if <see cref="P:DW.WPFToolkit.Interactivity.WindowClosingArgs.Cancel"/> is false. The default is true.
            </summary>
        </member>
        <member name="P:DW.WPFToolkit.Interactivity.WindowClosingArgs.Cancel">
            <summary>
            Gets or sets the value to define if the closing process has to be canceled and the window to stay open.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior">
            <summary>
            Brings the feature to the <see cref="T:System.Windows.Window"/> to disable or hide elements in the title bar.
            </summary>
            <example>
            <code lang="XAML">
            <![CDATA[
            <Window Interactivity:WindowTitleBarBehavior.DisableMinimizeButton="True"
                    Interactivity:WindowTitleBarBehavior.DisableMaximizeButton="True"
                    Interactivity:WindowTitleBarBehavior.DisableSystemMenu="True">
            </Window>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.GetRemoveTitleItems(System.Windows.DependencyObject)">
            <summary>
            Gets a value the indicates if the window has to show title bar items or not.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.RemoveTitleItems property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.SetRemoveTitleItems(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attaches a value the indicates if the window has to show title bar items or not.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.RemoveTitleItems value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.RemoveTitleItemsProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.GetRemoveTitleItems(System.Windows.DependencyObject)"/>  <see cref="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.SetRemoveTitleItems(System.Windows.DependencyObject,System.Boolean)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.GetDisableMinimizeButton(System.Windows.DependencyObject)">
            <summary>
            Gets a value the indicates if the window has an enabled minimize button or not.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.DisableMinimizeButton property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.SetDisableMinimizeButton(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attaches a value the indicates if the window has an enabled minimize button or not.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.DisableMinimizeButton value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.DisableMinimizeButtonProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.GetDisableMinimizeButton(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.SetDisableMinimizeButton(System.Windows.DependencyObject,System.Boolean)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.GetDisableMaximizeButton(System.Windows.DependencyObject)">
            <summary>
            Gets a value the indicates if the window has an enabled maximize button or not.
            </summary>
            <param name="obj">The element from which the property value is read.</param>
            <returns>The DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.DisableMaximizeButton property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.SetDisableMaximizeButton(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attaches a value the indicates if the window has an enabled maximize button or not.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.DisableMaximizeButton value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.DisableMaximizeButtonProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.GetDisableMaximizeButton(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.SetDisableMaximizeButton(System.Windows.DependencyObject,System.Boolean)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.GetDisableCloseButton(System.Windows.DependencyObject)">
            <summary>
            Gets a value that indicates if the window has an enabled close button or not.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <returns>The DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.DisableCloseButton property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.SetDisableCloseButton(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attaches a value the indicates if the window has an enabled close button or not.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.DisableCloseButton value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.DisableCloseButtonProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.GetDisableCloseButton(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.SetDisableCloseButton(System.Windows.DependencyObject,System.Boolean)"/> attached property.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.GetDisableSystemMenu(System.Windows.DependencyObject)">
            <summary>
            Gets a value that indicates if the window has a system menu or not.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <returns>The DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.DisableSystemMenu property value for the element.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.SetDisableSystemMenu(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Attaches a value the indicates if the window has a system menu or not.
            </summary>
            <param name="obj">The element to which the attached property is written.</param>
            <param name="value">The needed DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.DisableSystemMenu value.</param>
        </member>
        <member name="F:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.DisableSystemMenuProperty">
            <summary>
            Identifies the <see cref="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.GetDisableSystemMenu(System.Windows.DependencyObject)"/> <see cref="M:DW.WPFToolkit.Interactivity.WindowTitleBarBehavior.SetDisableSystemMenu(System.Windows.DependencyObject,System.Boolean)"/> attached property.
            </summary>
        </member>
        <member name="T:DW.WPFToolkit.Services.IWPFMessageBoxService">
            <summary>
            Wraps up the static WPFMessageBox object to have it testable.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Services.IWPFMessageBoxService.RegisterOwner(System.Windows.Window,System.Object)">
            <summary>
            Registers an owner window by a key to be used in the show methods.
            </summary>
            <param name="owner">The window to register.</param>
            <param name="key">The corresponding window key.</param>
            <remarks>If the key is known already the old will be overwritten. The window reference will not removed automatically, consider call the <see cref="M:DW.WPFToolkit.Services.IWPFMessageBoxService.UnregisterOwner(System.Object)"/> for removing an old window.</remarks>
        </member>
        <member name="M:DW.WPFToolkit.Services.IWPFMessageBoxService.UnregisterOwner(System.Object)">
            <summary>
            Removes a registered owner window by its key.
            </summary>
            <param name="key">The corresponding window key.</param>
        </member>
        <member name="M:DW.WPFToolkit.Services.IWPFMessageBoxService.Show(System.String)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.IWPFMessageBoxService.Show(System.String,System.String)">
            <summary>
            Displays a message box that has a message and title bar caption; and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.IWPFMessageBoxService.Show(System.Object,System.String)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message and returns a result.
            </summary>
            <param name="ownerKey">The key of the registered window by the <see cref="M:DW.WPFToolkit.Services.IWPFMessageBoxService.RegisterOwner(System.Windows.Window,System.Object)"/> that represents the owner window of the message box. If the key is null or no window is known with the key, the box will be called without an owner.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.IWPFMessageBoxService.Show(System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons)">
            <summary>
            Displays a message box that has a message, title bar caption, and button; and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.IWPFMessageBoxService.Show(System.Object,System.String,System.String)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message and title bar caption; and it returns a result.
            </summary>
            <param name="ownerKey">The key of the registered window by the <see cref="M:DW.WPFToolkit.Services.IWPFMessageBoxService.RegisterOwner(System.Windows.Window,System.Object)"/> that represents the owner window of the message box. If the key is null or no window is known with the key, the box will be called without an owner.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.IWPFMessageBoxService.Show(System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A WPFMessageBoxImage value that specifies the icon to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.IWPFMessageBoxService.Show(System.Object,System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, and button; and it also returns a result.
            </summary>
            <param name="ownerKey">The key of the registered window by the <see cref="M:DW.WPFToolkit.Services.IWPFMessageBoxService.RegisterOwner(System.Windows.Window,System.Object)"/> that represents the owner window of the message box. If the key is null or no window is known with the key, the box will be called without an owner.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.IWPFMessageBoxService.Show(System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage,DW.WPFToolkit.Controls.WPFMessageBoxResult)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result and returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A WPFMessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultResult">A WPFMessageBoxResult value that specifies the default result of the message box.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.IWPFMessageBoxService.Show(System.Object,System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and it also returns a result.
            </summary>
            <param name="ownerKey">The key of the registered window by the <see cref="M:DW.WPFToolkit.Services.IWPFMessageBoxService.RegisterOwner(System.Windows.Window,System.Object)"/> that represents the owner window of the message box. If the key is null or no window is known with the key, the box will be called without an owner.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A WPFMessageBoxImage value that specifies the icon to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.IWPFMessageBoxService.Show(System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage,DW.WPFToolkit.Controls.WPFMessageBoxResult,DW.WPFToolkit.Controls.WPFMessageBoxOptions)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result, complies with the specified options, and returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A WPFMessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultResult">A WPFMessageBoxResult value that specifies the default result of the message box.</param>
            <param name="options">A WPFMessageBoxOptions value object that specifies the options.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.IWPFMessageBoxService.Show(System.Object,System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage,DW.WPFToolkit.Controls.WPFMessageBoxResult)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result and returns a result.
            </summary>
            <param name="ownerKey">The key of the registered window by the <see cref="M:DW.WPFToolkit.Services.IWPFMessageBoxService.RegisterOwner(System.Windows.Window,System.Object)"/> that represents the owner window of the message box. If the key is null or no window is known with the key, the box will be called without an owner.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A WPFMessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultResult">A WPFMessageBoxResult value that specifies the default result of the message box.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.IWPFMessageBoxService.Show(System.Object,System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage,DW.WPFToolkit.Controls.WPFMessageBoxResult,DW.WPFToolkit.Controls.WPFMessageBoxOptions)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result, complies with the specified options, and returns a result.
            </summary>
            <param name="ownerKey">The key of the registered window by the <see cref="M:DW.WPFToolkit.Services.IWPFMessageBoxService.RegisterOwner(System.Windows.Window,System.Object)"/> that represents the owner window of the message box. If the key is null or no window is known with the key, the box will be called without an owner.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A WPFMessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultResult">A WPFMessageBoxResult value that specifies the default result of the message box.</param>
            <param name="options">A WPFMessageBoxOptions value object that specifies the options.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="T:DW.WPFToolkit.Services.WPFMessageBoxService">
            <summary>
            Wraps up the static MessageBox object to have it testable. See <see cref="T:System.Windows.MessageBox"/>.
            </summary>
            <example>
            <code lang="csharp">
            <![CDATA[
            private readonly IMessageBoxService _messageBoxService;
            
            public MainViewModel(IMessageBoxService messageBoxService)
            {
                _messageBoxService = messageBoxService;
            }
            
            public void Show1()
            {
                _messageBoxService.Show("Show the messagebox without an owner");
            }
            
            public void Show2()
            {
                _messageBoxService.Show("Show the messagebox without an owner", "But with a caption");
            }
            
            public void Show3()
            {
                _messageBoxService.Show(ViewKey.MainView, "Show the messagebox with an owner", "And with a caption", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            ]]>
            </code>
            
            <code lang="csharp">
            <![CDATA[
            public partial class App
            {
                private readonly IWindowService _windowService;
                private readonly IMessageBoxService _messageBoxService;
            
                public App()
                {
                    _windowService = new WindowService();
                    _messageBoxService = new MessageBoxService();
            
                    RegisterServices();
                }
            
                private void RegisterServices()
                {
                    _windowService.Register<MainView>(ViewKey.MainView);
                    _windowService.WindowCreated += HandleWindowCreated;
                    _windowService.WindowClosed += HandleWindowClosed;
                }
            
                private void HandleWindowCreated(object sender, WindowStateEventArgs e)
                {
                    _messageBoxService.RegisterOwner(e.Window, e.WindowKey);
                }
            
                private void HandleWindowClosed(object sender, WindowStateEventArgs e)
                {
                    _messageBoxService.UnregisterOwner(e.WindowKey);
                }
            
                protected override void OnStartup(StartupEventArgs e)
                {
                    _windowService.ShowDialog(ViewKey.MainView, new MainViewModel());
                }
            }
            
            public enum ViewKey
            {
                MainView
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:DW.WPFToolkit.Services.WPFMessageBoxService.#ctor">
            <summary>
            Initializes a new instance of the DW.WPFToolkit.Services.WPFMessageBoxService class.
            </summary>
        </member>
        <member name="M:DW.WPFToolkit.Services.WPFMessageBoxService.RegisterOwner(System.Windows.Window,System.Object)">
            <summary>
            Registers an owner window by a key to be used in the show methods.
            </summary>
            <param name="owner">The window to register.</param>
            <param name="key">The corresponding window key.</param>
            <remarks>If the key is known already the old will be overwritten. The window reference will not removed automatically, consider call the <see cref="M:DW.WPFToolkit.Services.WPFMessageBoxService.UnregisterOwner(System.Object)"/> for removing an old window.</remarks>
        </member>
        <member name="M:DW.WPFToolkit.Services.WPFMessageBoxService.UnregisterOwner(System.Object)">
            <summary>
            Removes a registered owner window by its key.
            </summary>
            <param name="key">The corresponding window key.</param>
        </member>
        <member name="M:DW.WPFToolkit.Services.WPFMessageBoxService.Show(System.String)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.WPFMessageBoxService.Show(System.String,System.String)">
            <summary>
            Displays a message box that has a message and title bar caption; and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.WPFMessageBoxService.Show(System.Object,System.String)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message and returns a result.
            </summary>
            <param name="ownerKey">The key of the registered window by the <see cref="M:DW.WPFToolkit.Services.WPFMessageBoxService.RegisterOwner(System.Windows.Window,System.Object)"/> that represents the owner window of the message box. If the key is null or no window is known with the key, the box will be called without an owner.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.WPFMessageBoxService.Show(System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons)">
            <summary>
            Displays a message box that has a message, title bar caption, and button; and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.WPFMessageBoxService.Show(System.Object,System.String,System.String)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message and title bar caption; and it returns a result.
            </summary>
            <param name="ownerKey">The key of the registered window by the <see cref="M:DW.WPFToolkit.Services.WPFMessageBoxService.RegisterOwner(System.Windows.Window,System.Object)"/> that represents the owner window of the message box. If the key is null or no window is known with the key, the box will be called without an owner.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.WPFMessageBoxService.Show(System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A WPFMessageBoxImage value that specifies the icon to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.WPFMessageBoxService.Show(System.Object,System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, and button; and it also returns a result.
            </summary>
            <param name="ownerKey">The key of the registered window by the <see cref="M:DW.WPFToolkit.Services.WPFMessageBoxService.RegisterOwner(System.Windows.Window,System.Object)"/> that represents the owner window of the message box. If the key is null or no window is known with the key, the box will be called without an owner.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.WPFMessageBoxService.Show(System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage,DW.WPFToolkit.Controls.WPFMessageBoxResult)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result and returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A WPFMessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultResult">A WPFMessageBoxResult value that specifies the default result of the message box.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.WPFMessageBoxService.Show(System.Object,System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and it also returns a result.
            </summary>
            <param name="ownerKey">The key of the registered window by the <see cref="M:DW.WPFToolkit.Services.WPFMessageBoxService.RegisterOwner(System.Windows.Window,System.Object)"/> that represents the owner window of the message box. If the key is null or no window is known with the key, the box will be called without an owner.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A WPFMessageBoxImage value that specifies the icon to display.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.WPFMessageBoxService.Show(System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage,DW.WPFToolkit.Controls.WPFMessageBoxResult,DW.WPFToolkit.Controls.WPFMessageBoxOptions)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result, complies with the specified options, and returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A WPFMessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultResult">A WPFMessageBoxResult value that specifies the default result of the message box.</param>
            <param name="options">A WPFMessageBoxOptions value object that specifies the options.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.WPFMessageBoxService.Show(System.Object,System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage,DW.WPFToolkit.Controls.WPFMessageBoxResult)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result and returns a result.
            </summary>
            <param name="ownerKey">The key of the registered window by the <see cref="M:DW.WPFToolkit.Services.WPFMessageBoxService.RegisterOwner(System.Windows.Window,System.Object)"/> that represents the owner window of the message box. If the key is null or no window is known with the key, the box will be called without an owner.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A WPFMessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultResult">A WPFMessageBoxResult value that specifies the default result of the message box.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:DW.WPFToolkit.Services.WPFMessageBoxService.Show(System.Object,System.String,System.String,DW.WPFToolkit.Controls.WPFMessageBoxButtons,DW.WPFToolkit.Controls.WPFMessageBoxImage,DW.WPFToolkit.Controls.WPFMessageBoxResult,DW.WPFToolkit.Controls.WPFMessageBoxOptions)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result, complies with the specified options, and returns a result.
            </summary>
            <param name="ownerKey">The key of the registered window by the <see cref="M:DW.WPFToolkit.Services.WPFMessageBoxService.RegisterOwner(System.Windows.Window,System.Object)"/> that represents the owner window of the message box. If the key is null or no window is known with the key, the box will be called without an owner.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A WPFMessageBoxButtons value that specifies which button or buttons to display.</param>
            <param name="icon">A WPFMessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultResult">A WPFMessageBoxResult value that specifies the default result of the message box.</param>
            <param name="options">A WPFMessageBoxOptions value object that specifies the options.</param>
            <returns>A WPFMessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
    </members>
</doc>
